{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    request = request.clone({\n      headers: request.headers.set('Authorization', 'Bearer ' + localStorage.getItem('jwtToken'))\n    });\n    return next.handle(request).pipe(catchError(error => {\n      console.log(error);\n      throw error;\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}\nexport { AuthInterceptor };\nexport const AuthInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","catchError","AuthInterceptor","constructor","authService","router","intercept","request","next","clone","headers","set","localStorage","getItem","handle","pipe","error","console","log","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","AuthInterceptorProvider","provide","useClass","multi"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\auth\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HTTP_INTERCEPTORS,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    request = request.clone({\n      headers: request.headers.set(\n        'Authorization',\n        'Bearer ' + localStorage.getItem('jwtToken')\n      ),\n    });\n\n    return next.handle(request).pipe(\n      catchError((error:HttpErrorResponse)=>{\n        console.log(error);\n        \n        throw error;\n      })\n    )\n  }\n}\n\nexport const AuthInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true,\n};\n"],"mappings":"AACA,SAKEA,iBAAiB,QAEZ,sBAAsB;AAC7B,SAAqBC,UAAU,QAAoB,MAAM;;;;AAIzD,MACaC,eAAe;EAC1BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,SAASA,CACPC,OAA6B,EAC7BC,IAAiB;IAEjBD,OAAO,GAAGA,OAAO,CAACE,KAAK,CAAC;MACtBC,OAAO,EAAEH,OAAO,CAACG,OAAO,CAACC,GAAG,CAC1B,eAAe,EACf,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;KAE/C,CAAC;IAEF,OAAOL,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bd,UAAU,CAAEe,KAAuB,IAAG;MACpCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAElB,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAAC,QAAAG,CAAA,G;qBArBUjB,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfxB,eAAe;IAAAyB,OAAA,EAAfzB,eAAe,CAAA0B;EAAA;;SAAf1B,eAAe;AAwB5B,OAAO,MAAM2B,uBAAuB,GAAG;EACrCC,OAAO,EAAE9B,iBAAiB;EAC1B+B,QAAQ,EAAE7B,eAAe;EACzB8B,KAAK,EAAE;CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}