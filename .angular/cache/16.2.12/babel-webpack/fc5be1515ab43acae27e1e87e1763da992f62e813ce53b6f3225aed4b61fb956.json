{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nconst ROLE_ADMIN = 'admin';\nconst ROLE_USER = 'user';\nlet LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.loginForm2 = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n  login(loginForm) {\n    console.log(loginForm.value);\n    console.log('form is submitted');\n    this.authService.login(loginForm.value).subscribe(response => {\n      const token = response.token;\n      const role = response.role;\n      this.authService.setToken(response.token);\n      this.authService.setRoles(response.role);\n      if (role === ROLE_ADMIN) {\n        this.router.navigate(['/admin']);\n      } else {\n        this.router.navigate(['/groups']);\n      }\n    }, error => {\n      console.log(error.message);\n    });\n  }\n  submitForm() {\n    this.authService.login(this.loginForm2.value).subscribe(response => {\n      const role = response.role;\n      this.authService.setToken(response.token);\n      this.authService.setRoles(response.role);\n      if (role === ROLE_ADMIN) {\n        this.router.navigate(['/admin']);\n      } else {\n        this.router.navigate(['/groups']);\n      }\n    }, error => {\n      if (error.status === 403) {\n        this.loginForm2.get('email')?.setErrors({\n          badCredentials: true\n        });\n      }\n    });\n  }\n  get email() {\n    return this.loginForm2.get('email');\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","ROLE_ADMIN","ROLE_USER","LoginComponent","constructor","authService","router","loginForm2","email","required","password","login","loginForm","console","log","value","subscribe","response","token","role","setToken","setRoles","navigate","error","message","submitForm","status","get","setErrors","badCredentials","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\nconst ROLE_ADMIN: string = 'admin';\nconst ROLE_USER: string = 'user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  loginForm2 = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required]),\n  });\n  login(loginForm: NgForm) {\n    console.log(loginForm.value);\n    console.log('form is submitted');\n    this.authService.login(loginForm.value).subscribe(\n      (response: any) => {\n        const token = response.token;\n        const role = response.role;\n        this.authService.setToken(response.token);\n        this.authService.setRoles(response.role);\n        if (role === ROLE_ADMIN) {\n          this.router.navigate(['/admin']);\n        } else {\n          this.router.navigate(['/groups']);\n        }\n      },\n      (error) => {\n        console.log(error.message);\n      }\n    );\n  }\n\n  submitForm() {\n    this.authService.login(this.loginForm2.value).subscribe(\n      (response: any) => {\n        const role = response.role;\n        this.authService.setToken(response.token);\n        this.authService.setRoles(response.role);\n        if (role === ROLE_ADMIN) {\n          this.router.navigate(['/admin']);\n        } else {\n          this.router.navigate(['/groups']);\n        }\n      },\n      (error) => {\n        if (error.status === 403) {\n          this.loginForm2.get('email')?.setErrors({ badCredentials: true });\n        }\n      }\n    );\n  }\n\n  get email() {\n    return this.loginForm2.get('email');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}