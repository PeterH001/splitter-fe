{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/auth';\n  }\n  login(logindata) {\n    return this.http.post(this.baseUrl + '/signin', logindata);\n  }\n  setRoles(roles) {\n    localStorage.setItem('roles', JSON.stringify(roles));\n  }\n  getRoles() {\n    const rolesString = localStorage.getItem('roles');\n    if (rolesString) {\n      return JSON.parse(rolesString);\n    } else {\n      return [];\n    }\n  }\n  setToken(jwtToken) {\n    localStorage.setItem('jwtToken', jwtToken);\n  }\n  getToken() {\n    return localStorage.getItem('jwtToken');\n  }\n  clear() {\n    localStorage.clear();\n  }\n  isLoggedIn() {\n    return this.getRoles() && this.getToken();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","http","baseUrl","login","logindata","post","setRoles","roles","localStorage","setItem","JSON","stringify","getRoles","rolesString","getItem","parse","setToken","jwtToken","getToken","clear","isLoggedIn","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private http: HttpClient) {}\n  private baseUrl: string = 'http://localhost:3000/auth';\n\n  login(logindata: any) {\n    return this.http.post(this.baseUrl + '/signin', logindata);\n  }\n\n  public setRoles(roles: []) {\n    localStorage.setItem('roles', JSON.stringify(roles));\n  }\n\n  public getRoles(): [] {\n    const rolesString = localStorage.getItem('roles');\n    if (rolesString) {\n        return JSON.parse(rolesString);\n    } else {\n        return [];\n    }\n  }\n\n  public setToken(jwtToken: string) {\n    localStorage.setItem('jwtToken', jwtToken);\n  }\n\n  public getToken(): string | null {\n    return localStorage.getItem('jwtToken');\n  }\n\n  public clear() {\n    localStorage.clear();\n  }\n\n  public isLoggedIn() {\n    return this.getRoles() && this.getToken();\n  }\n}\n"],"mappings":";;AAGA,MAGaA,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAChB,KAAAC,OAAO,GAAW,4BAA4B;EADf;EAGvCC,KAAKA,CAACC,SAAc;IAClB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI,CAACH,OAAO,GAAG,SAAS,EAAEE,SAAS,CAAC;EAC5D;EAEOE,QAAQA,CAACC,KAAS;IACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;EACtD;EAEOK,QAAQA,CAAA;IACb,MAAMC,WAAW,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;IACjD,IAAID,WAAW,EAAE;MACb,OAAOH,IAAI,CAACK,KAAK,CAACF,WAAW,CAAC;KACjC,MAAM;MACH,OAAO,EAAE;;EAEf;EAEOG,QAAQA,CAACC,QAAgB;IAC9BT,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEQ,QAAQ,CAAC;EAC5C;EAEOC,QAAQA,CAAA;IACb,OAAOV,YAAY,CAACM,OAAO,CAAC,UAAU,CAAC;EACzC;EAEOK,KAAKA,CAAA;IACVX,YAAY,CAACW,KAAK,EAAE;EACtB;EAEOC,UAAUA,CAAA;IACf,OAAO,IAAI,CAACR,QAAQ,EAAE,IAAI,IAAI,CAACM,QAAQ,EAAE;EAC3C;EAAC,QAAAG,CAAA,G;qBAnCUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEP9B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}