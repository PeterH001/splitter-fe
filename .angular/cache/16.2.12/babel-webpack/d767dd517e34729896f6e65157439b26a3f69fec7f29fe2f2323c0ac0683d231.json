{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet CreateExpenseComponent = class CreateExpenseComponent {\n  constructor(expenseService, groupService, route, router) {\n    this.expenseService = expenseService;\n    this.groupService = groupService;\n    this.route = route;\n    this.router = router;\n    this.createGroupForm = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n      groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n      amount: new FormControl('', Validators.required),\n      currency: new FormControl('', Validators.required),\n      category: new FormControl('', Validators.required),\n      distributionType: new FormControl('', Validators.required),\n      description: new FormControl(''),\n      userIds: new FormControl([], [Validators.required, Validators.minLength(1)]),\n      proportionalDebtsData: new FormControl([], [percentSumValidator()])\n    });\n    this.selectedGroupMembers = [];\n    this.proportionalMembers = [];\n  }\n  ngOnInit() {\n    this.expenseService.getExpenseCategories().subscribe(result => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n    this.groupService.getGroupMembers(this.groupId).subscribe(result => {\n      this.groupMembers = result;\n      console.log('result: ', result);\n      console.log('groupmembers: ', this.groupMembers);\n    });\n    this.expenseService.getCurrencies().subscribe(result => {\n      this.currencies = result;\n    });\n    this.expenseService.getExpenseDistributions().subscribe(result => {\n      this.distributionTypes = result;\n      console.log(this.distributionTypes);\n    });\n  }\n  toggleSelection(userId) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(item => item !== userId);\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n  toggleProportionalSelection(userId, percent) {\n    const index = this.proportionalMembers.findIndex(memberObj => memberObj.userId === userId);\n    if (percent) {\n      if (index !== -1) {\n        this.proportionalMembers[index].percent = percent;\n      } else {\n        this.proportionalMembers.push({\n          userId: userId,\n          percent: percent\n        });\n      }\n    } else {\n      if (index !== -1) {\n        this.proportionalMembers.splice(index, 1);\n      }\n    }\n    this.selectedGroupMembers = this.proportionalMembers.map(memberObj => memberObj.userId);\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    this.createGroupForm.get('proportionalDebtsData')?.setValue(this.proportionalMembers);\n    console.log('proportionalMembers: ', this.proportionalMembers);\n    console.log('selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n  isChecked(id) {\n    return this.selectedGroupMembers.find(userId => userId === id) ? true : false;\n  }\n  goBack() {\n    this.router.navigate(['/groupdetails', this.groupId]);\n  }\n  submitForm() {\n    console.log(this.createGroupForm.value);\n    this.expenseService.createExpense(this.createGroupForm.value).subscribe(() => {\n      this.router.navigate(['/groupdetails', this.groupId]);\n    });\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n  get currency() {\n    return this.createGroupForm.get('currency');\n  }\n  get amount() {\n    return this.createGroupForm.get('amount');\n  }\n  get payerId() {\n    return this.createGroupForm.get('payerId');\n  }\n  get category() {\n    return this.createGroupForm.get('category');\n  }\n  get distributionType() {\n    return this.createGroupForm.get('distributionType');\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n  get proportionalDebtsData() {\n    return this.createGroupForm.get('proportionalDebtsData');\n  }\n};\nCreateExpenseComponent = __decorate([Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css']\n})], CreateExpenseComponent);\nexport { CreateExpenseComponent };\nfunction percentSumValidator() {\n  return control => {\n    let sum = 0;\n    const value = control.value;\n    value.forEach(memberObj => {\n      sum += memberObj.percent;\n    });\n    if (sum > 100) {\n      return {\n        tooMuch: true\n      };\n    } else if (sum < 100) {\n      return {\n        tooShort: true\n      };\n    }\n    return null;\n  };\n}","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","CreateExpenseComponent","constructor","expenseService","groupService","route","router","createGroupForm","name","required","payerId","min","groupId","amount","currency","category","distributionType","description","userIds","minLength","proportionalDebtsData","percentSumValidator","selectedGroupMembers","proportionalMembers","ngOnInit","getExpenseCategories","subscribe","result","categories","console","log","snapshot","paramMap","get","parseInt","groupIdControl","setValue","getGroupMembers","groupMembers","getCurrencies","currencies","getExpenseDistributions","distributionTypes","toggleSelection","userId","includes","filter","item","push","toggleProportionalSelection","percent","index","findIndex","memberObj","splice","map","isChecked","id","find","goBack","navigate","submitForm","value","createExpense","__decorate","selector","templateUrl","styleUrls","control","sum","forEach","tooMuch","tooShort"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\expense\\create-expense\\create-expense.component.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ExpenseService } from 'src/app/services/expense.service';\nimport { GroupService } from 'src/app/services/group.service';\nimport { distributionTypesEnumMappings as distributionTypesEnumMappings } from '../enum';\nimport {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css'],\n})\nexport class CreateExpenseComponent implements OnInit {\n  createGroupForm = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n    groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n    amount: new FormControl('', Validators.required),\n    currency: new FormControl('', Validators.required),\n    category: new FormControl('', Validators.required),\n    distributionType: new FormControl('', Validators.required),\n    description: new FormControl(''),\n    userIds: new FormControl<number[]>(\n      [],\n      [Validators.required, Validators.minLength(1)]\n    ),\n    proportionalDebtsData: new FormControl<\n      { userId: number; percent: number }[]\n    >([], [percentSumValidator()]),\n  });\n\n  groupMembers!: { id: number; username: string }[];\n  selectedGroupMembers: number[] = [];\n  proportionalMembers: { userId: number; percent: number }[] = [];\n  groupId!: number;\n  categories!: string[];\n  distributionTypes!: string[];\n  currencies!: string[];\n  constructor(\n    private expenseService: ExpenseService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n  ngOnInit(): void {\n    this.expenseService.getExpenseCategories().subscribe((result) => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId!);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n\n    this.groupService.getGroupMembers(this.groupId).subscribe((result) => {\n      this.groupMembers = result;\n      console.log('result: ', result);\n      console.log('groupmembers: ', this.groupMembers);\n    });\n\n    this.expenseService.getCurrencies().subscribe((result) => {\n      this.currencies = result;\n    });\n    this.expenseService.getExpenseDistributions().subscribe((result) => {\n      this.distributionTypes = result;\n      console.log(this.distributionTypes);\n    });\n  }\n\n  toggleSelection(userId: number) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(\n        (item) => item !== userId\n      );\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n\n  toggleProportionalSelection(userId: number, percent: number) {\n    const index = this.proportionalMembers.findIndex(\n      (memberObj) => memberObj.userId === userId\n    );\n    if (percent) {\n      if (index !== -1) {\n        this.proportionalMembers[index].percent = percent;\n      } else {\n        this.proportionalMembers.push({ userId: userId, percent: percent });\n      }\n    } else {\n      if (index !== -1) {\n        this.proportionalMembers.splice(index, 1);\n      }\n    }\n    this.selectedGroupMembers = this.proportionalMembers.map(\n      (memberObj) => memberObj.userId\n    );\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    this.createGroupForm\n      .get('proportionalDebtsData')\n      ?.setValue(this.proportionalMembers);\n    console.log('proportionalMembers: ', this.proportionalMembers);\n    console.log('selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n\n  isChecked(id: number) {\n    return this.selectedGroupMembers.find((userId) => userId === id)\n      ? true\n      : false;\n  }\n\n  goBack() {\n    this.router.navigate(['/groupdetails', this.groupId]);\n  }\n\n  submitForm(): void {\n    console.log(this.createGroupForm.value);\n\n    this.expenseService\n      .createExpense(this.createGroupForm.value)\n      .subscribe(() => {\n        this.router.navigate(['/groupdetails', this.groupId]);\n      });\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n  get currency() {\n    return this.createGroupForm.get('currency');\n  }\n  get amount() {\n    return this.createGroupForm.get('amount');\n  }\n  get payerId() {\n    return this.createGroupForm.get('payerId');\n  }\n  get category() {\n    return this.createGroupForm.get('category');\n  }\n  get distributionType() {\n    return this.createGroupForm.get('distributionType');\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n  get proportionalDebtsData() {\n    return this.createGroupForm.get('proportionalDebtsData');\n  }\n}\n\nfunction percentSumValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    let sum: number = 0;\n    const value: { userId: number; percent: number }[] = control.value;\n\n    value.forEach((memberObj) => {\n      sum += memberObj.percent;\n    });\n\n    if (sum > 100) {\n      return { tooMuch: true };\n    } else if (sum < 100) {\n      return { tooShort: true };\n    }\n    return null;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}