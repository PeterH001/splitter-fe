{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet CreateExpenseComponent = class CreateExpenseComponent {\n  constructor(expenseService, groupService, route, router) {\n    this.expenseService = expenseService;\n    this.groupService = groupService;\n    this.route = route;\n    this.router = router;\n    this.createGroupForm = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n      groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n      amount: new FormControl('', Validators.required),\n      currency: new FormControl('', Validators.required),\n      category: new FormControl('', Validators.required),\n      distributionType: new FormControl('', Validators.required),\n      description: new FormControl(''),\n      userIds: new FormControl([], [Validators.required, Validators.minLength(1)])\n    });\n    this.selectedGroupMembers = [];\n  }\n  ngOnInit() {\n    this.expenseService.getExpenseCategories().subscribe(result => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n    this.groupService.getGroupMembers(this.groupId).subscribe(result => {\n      this.groupMembers = result;\n      console.log(\"result: \", result);\n      console.log(\"groupmembers: \", this.groupMembers);\n    });\n    this.expenseService.getCurrencies().subscribe(result => {\n      this.currencies = result;\n    });\n    this.expenseService.getExpenseDistributions().subscribe(result => {\n      this.distributionTypes = result;\n      console.log(this.distributionTypes);\n    });\n  }\n  toggleSelection(userId) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(item => item !== userId);\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n  isChecked(id) {\n    return this.selectedGroupMembers.find(userId => userId === id) ? true : false;\n  }\n  goBack() {\n    this.router.navigate(['/groupdetails', this.groupId]);\n  }\n  submitForm() {\n    // console.log(this.createGroupForm.value);\n    this.expenseService.createExpense(this.createGroupForm.value).subscribe(() => {\n      this.router.navigate(['/groupdetails', this.groupId]);\n    });\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n  get currency() {\n    return this.createGroupForm.get('currency');\n  }\n  get amount() {\n    return this.createGroupForm.get('amount');\n  }\n  get payerId() {\n    return this.createGroupForm.get('payerId');\n  }\n  get category() {\n    return this.createGroupForm.get('category');\n  }\n  get distributionType() {\n    return this.createGroupForm.get('distributionType');\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n};\nCreateExpenseComponent = __decorate([Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css']\n})], CreateExpenseComponent);\nexport { CreateExpenseComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","CreateExpenseComponent","constructor","expenseService","groupService","route","router","createGroupForm","name","required","payerId","min","groupId","amount","currency","category","distributionType","description","userIds","minLength","selectedGroupMembers","ngOnInit","getExpenseCategories","subscribe","result","categories","console","log","snapshot","paramMap","get","parseInt","groupIdControl","setValue","getGroupMembers","groupMembers","getCurrencies","currencies","getExpenseDistributions","distributionTypes","toggleSelection","userId","includes","filter","item","push","isChecked","id","find","goBack","navigate","submitForm","createExpense","value","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\expense\\create-expense\\create-expense.component.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ExpenseService } from 'src/app/services/expense.service';\nimport { GroupService } from 'src/app/services/group.service';\nimport { distributionTypesEnumMappings as distributionTypesEnumMappings } from '../enum';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css'],\n})\nexport class CreateExpenseComponent implements OnInit {\n\n  createGroupForm = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n    groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n    amount: new FormControl('', Validators.required),\n    currency: new FormControl('', Validators.required),\n    category: new FormControl('', Validators.required),\n    distributionType: new FormControl('', Validators.required),\n    description: new FormControl(''),\n    userIds: new FormControl<number[]>([], [Validators.required, Validators.minLength(1)]),\n  });\n\n  groupMembers!: { id: number; username: string }[];\n  selectedGroupMembers: number[] = [];\n  groupId!: number;\n  categories!: string[];\n  distributionTypes!: string[];\n  currencies!: string[];\n  constructor(\n    private expenseService: ExpenseService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n  ngOnInit(): void {\n    this.expenseService.getExpenseCategories().subscribe((result) => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId!);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n\n    this.groupService.getGroupMembers(this.groupId).subscribe((result) => {\n      this.groupMembers = result;\n      console.log(\"result: \",result);\n      console.log(\"groupmembers: \",this.groupMembers);\n    });\n    \n\n    this.expenseService.getCurrencies().subscribe((result) => {\n      this.currencies = result;\n    });\n    this.expenseService.getExpenseDistributions().subscribe(result=>{\n      this.distributionTypes = result;\n      console.log(this.distributionTypes);\n      \n    })\n  }\n\n  toggleSelection(userId: number) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(\n        (item) => item !== userId\n      );\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n\n  isChecked(id: number){\n    return  this.selectedGroupMembers.find(userId=> userId === id) ? true : false;\n   }\n\n  goBack() {\n    this.router.navigate(['/groupdetails', this.groupId]);\n  }\n\n  submitForm(): void {\n    // console.log(this.createGroupForm.value);\n    \n    this.expenseService.createExpense(this.createGroupForm.value).subscribe(()=>{\n      this.router.navigate(['/groupdetails', this.groupId]);\n    });\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n  get currency() {\n    return this.createGroupForm.get('currency');\n  }\n  get amount() {\n    return this.createGroupForm.get('amount');\n  }\n  get payerId() {\n    return this.createGroupForm.get('payerId');\n  }\n  get category() {\n    return this.createGroupForm.get('category');\n  }\n  get distributionType() {\n    return this.createGroupForm.get('distributionType');\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AAKjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAOnE,IAAaC,sBAAsB,GAAnC,MAAaA,sBAAsB;EAoBjCC,YACUC,cAA8B,EAC9BC,YAA0B,EAC1BC,KAAqB,EACrBC,MAAc;IAHd,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IAtBhB,KAAAC,eAAe,GAAG,IAAIR,SAAS,CAAC;MAC9BS,IAAI,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACS,QAAQ,CAAC,CAAC;MAChDC,OAAO,EAAE,IAAIZ,WAAW,CAAC,CAAC,CAAC,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACtEC,OAAO,EAAE,IAAId,WAAW,CAAC,CAAC,CAAC,EAAE,CAACE,UAAU,CAACW,GAAG,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACS,QAAQ,CAAC,CAAC;MACtEI,MAAM,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACS,QAAQ,CAAC;MAChDK,QAAQ,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACS,QAAQ,CAAC;MAClDM,QAAQ,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACS,QAAQ,CAAC;MAClDO,gBAAgB,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACS,QAAQ,CAAC;MAC1DQ,WAAW,EAAE,IAAInB,WAAW,CAAC,EAAE,CAAC;MAChCoB,OAAO,EAAE,IAAIpB,WAAW,CAAW,EAAE,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACmB,SAAS,CAAC,CAAC,CAAC,CAAC;KACtF,CAAC;IAGF,KAAAC,oBAAoB,GAAa,EAAE;EAUhC;EACHC,QAAQA,CAAA;IACN,IAAI,CAAClB,cAAc,CAACmB,oBAAoB,EAAE,CAACC,SAAS,CAAEC,MAAM,IAAI;MAC9D,IAAI,CAACC,UAAU,GAAGD,MAAM;MACxBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,UAAU,CAAC;IAC9B,CAAC,CAAC;IACF,MAAMb,OAAO,GAAG,IAAI,CAACP,KAAK,CAACuB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACtD,IAAI,CAAClB,OAAO,GAAGmB,QAAQ,CAACnB,OAAQ,CAAC;IACjC,MAAMoB,cAAc,GAAG,IAAI,CAACzB,eAAe,CAACuB,GAAG,CAAC,SAAS,CAAC;IAC1D,IAAIE,cAAc,KAAK,IAAI,EAAE;MAC3BA,cAAc,CAACC,QAAQ,CAAC,IAAI,CAACrB,OAAO,CAAC;;IAGvC,IAAI,CAACR,YAAY,CAAC8B,eAAe,CAAC,IAAI,CAACtB,OAAO,CAAC,CAACW,SAAS,CAAEC,MAAM,IAAI;MACnE,IAAI,CAACW,YAAY,GAAGX,MAAM;MAC1BE,OAAO,CAACC,GAAG,CAAC,UAAU,EAACH,MAAM,CAAC;MAC9BE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAC,IAAI,CAACQ,YAAY,CAAC;IACjD,CAAC,CAAC;IAGF,IAAI,CAAChC,cAAc,CAACiC,aAAa,EAAE,CAACb,SAAS,CAAEC,MAAM,IAAI;MACvD,IAAI,CAACa,UAAU,GAAGb,MAAM;IAC1B,CAAC,CAAC;IACF,IAAI,CAACrB,cAAc,CAACmC,uBAAuB,EAAE,CAACf,SAAS,CAACC,MAAM,IAAE;MAC9D,IAAI,CAACe,iBAAiB,GAAGf,MAAM;MAC/BE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACY,iBAAiB,CAAC;IAErC,CAAC,CAAC;EACJ;EAEAC,eAAeA,CAACC,MAAc;IAC5B,IAAI,IAAI,CAACrB,oBAAoB,CAACsB,QAAQ,CAACD,MAAM,CAAC,EAAE;MAC9C,IAAI,CAACrB,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACuB,MAAM,CACzDC,IAAI,IAAKA,IAAI,KAAKH,MAAM,CAC1B;KACF,MAAM;MACL,IAAI,CAACrB,oBAAoB,CAACyB,IAAI,CAACJ,MAAM,CAAC;;IAExC,IAAI,CAAClC,eAAe,CAACuB,GAAG,CAAC,SAAS,CAAC,EAAEG,QAAQ,CAAC,IAAI,CAACb,oBAAoB,CAAC;IACxEM,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACP,oBAAoB,CAAC;EACvE;EAEA0B,SAASA,CAACC,EAAU;IAClB,OAAQ,IAAI,CAAC3B,oBAAoB,CAAC4B,IAAI,CAACP,MAAM,IAAGA,MAAM,KAAKM,EAAE,CAAC,GAAG,IAAI,GAAG,KAAK;EAC9E;EAEDE,MAAMA,CAAA;IACJ,IAAI,CAAC3C,MAAM,CAAC4C,QAAQ,CAAC,CAAC,eAAe,EAAE,IAAI,CAACtC,OAAO,CAAC,CAAC;EACvD;EAEAuC,UAAUA,CAAA;IACR;IAEA,IAAI,CAAChD,cAAc,CAACiD,aAAa,CAAC,IAAI,CAAC7C,eAAe,CAAC8C,KAAK,CAAC,CAAC9B,SAAS,CAAC,MAAI;MAC1E,IAAI,CAACjB,MAAM,CAAC4C,QAAQ,CAAC,CAAC,eAAe,EAAE,IAAI,CAACtC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC;EACJ;EACA,IAAIJ,IAAIA,CAAA;IACN,OAAO,IAAI,CAACD,eAAe,CAACuB,GAAG,CAAC,MAAM,CAAC;EACzC;EACA,IAAIhB,QAAQA,CAAA;IACV,OAAO,IAAI,CAACP,eAAe,CAACuB,GAAG,CAAC,UAAU,CAAC;EAC7C;EACA,IAAIjB,MAAMA,CAAA;IACR,OAAO,IAAI,CAACN,eAAe,CAACuB,GAAG,CAAC,QAAQ,CAAC;EAC3C;EACA,IAAIpB,OAAOA,CAAA;IACT,OAAO,IAAI,CAACH,eAAe,CAACuB,GAAG,CAAC,SAAS,CAAC;EAC5C;EACA,IAAIf,QAAQA,CAAA;IACV,OAAO,IAAI,CAACR,eAAe,CAACuB,GAAG,CAAC,UAAU,CAAC;EAC7C;EACA,IAAId,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAACT,eAAe,CAACuB,GAAG,CAAC,kBAAkB,CAAC;EACrD;EACA,IAAIZ,OAAOA,CAAA;IACT,OAAO,IAAI,CAACX,eAAe,CAACuB,GAAG,CAAC,SAAS,CAAC;EAC5C;CACD;AAvGY7B,sBAAsB,GAAAqD,UAAA,EALlCzD,SAAS,CAAC;EACT0D,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACWxD,sBAAsB,CAuGlC;SAvGYA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}