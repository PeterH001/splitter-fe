{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass ToastService {\n  constructor() {\n    this.toasts = [];\n  }\n  show(toast) {\n    this.toasts.push(toast);\n  }\n  remove(toast) {\n    this.toasts = this.toasts.filter(t => t !== toast);\n  }\n  clear() {\n    this.toasts.splice(0, this.toasts.length);\n  }\n  static #_ = this.ɵfac = function ToastService_Factory(t) {\n    return new (t || ToastService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ToastService,\n    factory: ToastService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ToastService };","map":{"version":3,"names":["ToastService","constructor","toasts","show","toast","push","remove","filter","t","clear","splice","length","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\toast.service.ts"],"sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\n\nexport interface Toast {\n\ttemplate: TemplateRef<any>;\n\tclassname?: string;\n\tdelay?: number;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ToastService {\n\ttoasts: Toast[] = [];\n\n\tshow(toast: Toast) {\n\t\tthis.toasts.push(toast);\n\t}\n\n\tremove(toast: Toast) {\n\t\tthis.toasts = this.toasts.filter((t) => t !== toast);\n\t}\n\n\tclear() {\n\t\tthis.toasts.splice(0, this.toasts.length);\n\t}\n}"],"mappings":";AAQA,MACaA,YAAY;EADzBC,YAAA;IAEC,KAAAC,MAAM,GAAY,EAAE;;EAEpBC,IAAIA,CAACC,KAAY;IAChB,IAAI,CAACF,MAAM,CAACG,IAAI,CAACD,KAAK,CAAC;EACxB;EAEAE,MAAMA,CAACF,KAAY;IAClB,IAAI,CAACF,MAAM,GAAG,IAAI,CAACA,MAAM,CAACK,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKJ,KAAK,CAAC;EACrD;EAEAK,KAAKA,CAAA;IACJ,IAAI,CAACP,MAAM,CAACQ,MAAM,CAAC,CAAC,EAAE,IAAI,CAACR,MAAM,CAACS,MAAM,CAAC;EAC1C;EAAC,QAAAC,CAAA,G;qBAbWZ,YAAY;EAAA;EAAA,QAAAa,EAAA,G;WAAZb,YAAY;IAAAc,OAAA,EAAZd,YAAY,CAAAe,IAAA;IAAAC,UAAA,EADC;EAAM;;SACnBhB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}