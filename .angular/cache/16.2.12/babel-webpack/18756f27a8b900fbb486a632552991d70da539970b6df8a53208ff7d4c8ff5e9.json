{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nclass UserService {\n  constructor(authservice) {\n    this.authservice = authservice;\n  }\n  roleMatch(allowedRoles) {\n    let isRoleMatching = false;\n    const userRoles = this.authservice.getRoles();\n    if (userRoles != null && userRoles) {}\n    return isRoleMatching;\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UserService };","map":{"version":3,"names":["UserService","constructor","authservice","roleMatch","allowedRoles","isRoleMatching","userRoles","getRoles","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private authservice: AuthService) {}\n\n  public roleMatch(allowedRoles: string[]): boolean {\n    let isRoleMatching = false;\n    const userRoles: string[] = this.authservice.getRoles();\n    if (userRoles != null && userRoles) {\n   \n    }\n    return isRoleMatching;\n  }\n}\n"],"mappings":";;AAGA,MAGaA,WAAW;EACtBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAExCC,SAASA,CAACC,YAAsB;IACrC,IAAIC,cAAc,GAAG,KAAK;IAC1B,MAAMC,SAAS,GAAa,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACvD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE,C;IAGpC,OAAOD,cAAc;EACvB;EAAC,QAAAG,CAAA,G;qBAVUR,WAAW,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXb,WAAW;IAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPhB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}