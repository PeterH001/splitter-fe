{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/common/http\";\nconst SEARCHUSER_URL = 'http://localhost:3000/user/find';\nclass UserService {\n  constructor(authservice, http) {\n    this.authservice = authservice;\n    this.http = http;\n  }\n  roleMatch(allowedRoles) {\n    let isRoleMatching = false;\n    const userRoles = this.authservice.getRoles();\n    if (userRoles != null && userRoles) {\n      return allowedRoles.some(role => userRoles.includes(role));\n    }\n    return isRoleMatching;\n  }\n  searchUser(partialUsername) {\n    return this.http.post(SEARCHUSER_URL, {\n      partialUsername\n    });\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UserService };","map":{"version":3,"names":["SEARCHUSER_URL","UserService","constructor","authservice","http","roleMatch","allowedRoles","isRoleMatching","userRoles","getRoles","some","role","includes","searchUser","partialUsername","post","_","i0","ɵɵinject","i1","AuthService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { HttpClient } from '@angular/common/http';\n\nconst SEARCHUSER_URL = 'http://localhost:3000/user/find';\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private authservice: AuthService, private http: HttpClient) {}\n\n  public roleMatch(allowedRoles: string[]): boolean {\n    let isRoleMatching = false;\n    const userRoles: string[] = this.authservice.getRoles();\n    if (userRoles != null && userRoles) {\n      return allowedRoles.some((role) => userRoles.includes(role));\n    }\n    return isRoleMatching;\n  }\n\n  public searchUser(partialUsername: string) {\n    return this.http.post(SEARCHUSER_URL, { partialUsername });\n  }\n}\n"],"mappings":";;;AAIA,MAAMA,cAAc,GAAG,iCAAiC;AACxD,MAGaC,WAAW;EACtBC,YAAoBC,WAAwB,EAAUC,IAAgB;IAAlD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,IAAI,GAAJA,IAAI;EAAe;EAElEC,SAASA,CAACC,YAAsB;IACrC,IAAIC,cAAc,GAAG,KAAK;IAC1B,MAAMC,SAAS,GAAa,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IACvD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE;MAClC,OAAOF,YAAY,CAACI,IAAI,CAAEC,IAAI,IAAKH,SAAS,CAACI,QAAQ,CAACD,IAAI,CAAC,CAAC;;IAE9D,OAAOJ,cAAc;EACvB;EAEOM,UAAUA,CAACC,eAAuB;IACvC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAACf,cAAc,EAAE;MAAEc;IAAe,CAAE,CAAC;EAC5D;EAAC,QAAAE,CAAA,G;qBAdUf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPzB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}