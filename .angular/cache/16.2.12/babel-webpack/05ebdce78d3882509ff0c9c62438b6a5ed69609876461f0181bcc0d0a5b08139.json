{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet CreateGroupComponent = class CreateGroupComponent {\n  constructor(location, userService, groupService, router, toastService) {\n    this.location = location;\n    this.userService = userService;\n    this.groupService = groupService;\n    this.router = router;\n    this.toastService = toastService;\n    this.createGroupForm = new FormGroup({\n      groupName: new FormControl('', Validators.required),\n      userIds: new FormControl([])\n    });\n    this.selectedUsers = [];\n  }\n  ngOnInit() {\n    this.userService.getUsers().subscribe(result => {\n      console.log('result: ', result);\n      this.users = result;\n    });\n  }\n  submitForm() {\n    console.log('Form data:', this.createGroupForm.value);\n    this.groupService.createGroup(this.createGroupForm.value).subscribe(() => {\n      // this.showStandard()\n      this.router.navigate(['/groups']);\n    });\n    // Add your form submission logic here\n  }\n\n  goBack() {\n    this.location.back();\n  }\n  toggleSelection(userId) {\n    if (this.selectedUsers.includes(userId)) {\n      this.selectedUsers = this.selectedUsers.filter(item => item !== userId);\n    } else {\n      this.selectedUsers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedUsers);\n    console.log('this.selectedGroupMembers: ', this.selectedUsers);\n  }\n  showSuccessToast(template) {\n    this.toastService.show({\n      template,\n      classname: 'bg-success text-light',\n      delay: 10000\n    });\n  }\n  showDangerToast(template) {\n    this.toastService.show({\n      template,\n      classname: 'bg-danger text-light',\n      delay: 15000\n    });\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n  get groupName() {\n    return this.createGroupForm.get('groupName');\n  }\n  ngOnDestroy() {\n    this.toastService.clear();\n  }\n};\n__decorate([ViewChild(\"successTpl\", {\n  read: TemplateRef\n})], CreateGroupComponent.prototype, \"ngOnInit\", null);\nCreateGroupComponent = __decorate([Component({\n  selector: 'app-create-group',\n  templateUrl: './create-group.component.html',\n  styleUrls: ['./create-group.component.css']\n})], CreateGroupComponent);\nexport { CreateGroupComponent };","map":{"version":3,"names":["Component","TemplateRef","ViewChild","FormControl","FormGroup","Validators","CreateGroupComponent","constructor","location","userService","groupService","router","toastService","createGroupForm","groupName","required","userIds","selectedUsers","ngOnInit","getUsers","subscribe","result","console","log","users","submitForm","value","createGroup","navigate","goBack","back","toggleSelection","userId","includes","filter","item","push","get","setValue","showSuccessToast","template","show","classname","delay","showDangerToast","ngOnDestroy","clear","__decorate","read","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\group\\create-group\\create-group.component.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { GroupService } from 'src/app/services/group.service';\nimport { ToastService } from 'src/app/services/toast.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-create-group',\n  templateUrl: './create-group.component.html',\n  styleUrls: ['./create-group.component.css'],\n})\nexport class CreateGroupComponent implements OnInit, OnDestroy {\n  createGroupForm = new FormGroup({\n    groupName: new FormControl('', Validators.required),\n    userIds: new FormControl<number[]>([]),\n  });\n  users!: { id: number; username: string }[];\n  selectedUsers: number[] = [];\n  constructor(\n    private location: Location,\n    private userService: UserService,\n    private groupService: GroupService,\n    private router: Router,\n    private toastService: ToastService\n  ) {}\n\n  @ViewChild(\"successTpl\", {read: TemplateRef})\n  \n  ngOnInit(): void {\n    this.userService.getUsers().subscribe((result) => {\n      console.log('result: ', result);\n      this.users = result;\n    });\n  }\n  submitForm(): void {\n    console.log('Form data:', this.createGroupForm.value);\n    this.groupService.createGroup(this.createGroupForm.value).subscribe(() => {\n      // this.showStandard()\n      this.router.navigate(['/groups']);\n    });\n    // Add your form submission logic here\n  }\n  goBack() {\n    this.location.back();\n  }\n\n  toggleSelection(userId: number) {\n    if (this.selectedUsers.includes(userId)) {\n      this.selectedUsers = this.selectedUsers.filter((item) => item !== userId);\n    } else {\n      this.selectedUsers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedUsers);\n    console.log('this.selectedGroupMembers: ', this.selectedUsers);\n  }\n\n  showSuccessToast(template: TemplateRef<any>) {\n\t\tthis.toastService.show({ template, classname: 'bg-success text-light', delay: 10000 });\n\t}\n\n  showDangerToast(template: TemplateRef<any>) {\n\t\tthis.toastService.show({ template, classname: 'bg-danger text-light', delay: 15000 });\n\t}\n\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n\n  get groupName() {\n    return this.createGroupForm.get('groupName');\n  }\n\n  ngOnDestroy(): void {\n    this.toastService.clear();\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,EAAqBC,WAAW,EAAEC,SAAS,QAAQ,eAAe;AACpF,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAWnE,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAoB;EAO/BC,YACUC,QAAkB,EAClBC,WAAwB,EACxBC,YAA0B,EAC1BC,MAAc,EACdC,YAA0B;IAJ1B,KAAAJ,QAAQ,GAARA,QAAQ;IACR,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IAXtB,KAAAC,eAAe,GAAG,IAAIT,SAAS,CAAC;MAC9BU,SAAS,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,QAAQ,CAAC;MACnDC,OAAO,EAAE,IAAIb,WAAW,CAAW,EAAE;KACtC,CAAC;IAEF,KAAAc,aAAa,GAAa,EAAE;EAOzB;EAIHC,QAAQA,CAAA;IACN,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAE,CAACC,SAAS,CAAEC,MAAM,IAAI;MAC/CC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,MAAM,CAAC;MAC/B,IAAI,CAACG,KAAK,GAAGH,MAAM;IACrB,CAAC,CAAC;EACJ;EACAI,UAAUA,CAAA;IACRH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAACV,eAAe,CAACa,KAAK,CAAC;IACrD,IAAI,CAAChB,YAAY,CAACiB,WAAW,CAAC,IAAI,CAACd,eAAe,CAACa,KAAK,CAAC,CAACN,SAAS,CAAC,MAAK;MACvE;MACA,IAAI,CAACT,MAAM,CAACiB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC;IACF;EACF;;EACAC,MAAMA,CAAA;IACJ,IAAI,CAACrB,QAAQ,CAACsB,IAAI,EAAE;EACtB;EAEAC,eAAeA,CAACC,MAAc;IAC5B,IAAI,IAAI,CAACf,aAAa,CAACgB,QAAQ,CAACD,MAAM,CAAC,EAAE;MACvC,IAAI,CAACf,aAAa,GAAG,IAAI,CAACA,aAAa,CAACiB,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKH,MAAM,CAAC;KAC1E,MAAM;MACL,IAAI,CAACf,aAAa,CAACmB,IAAI,CAACJ,MAAM,CAAC;;IAEjC,IAAI,CAACnB,eAAe,CAACwB,GAAG,CAAC,SAAS,CAAC,EAAEC,QAAQ,CAAC,IAAI,CAACrB,aAAa,CAAC;IACjEK,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACN,aAAa,CAAC;EAChE;EAEAsB,gBAAgBA,CAACC,QAA0B;IAC3C,IAAI,CAAC5B,YAAY,CAAC6B,IAAI,CAAC;MAAED,QAAQ;MAAEE,SAAS,EAAE,uBAAuB;MAAEC,KAAK,EAAE;IAAK,CAAE,CAAC;EACvF;EAECC,eAAeA,CAACJ,QAA0B;IAC1C,IAAI,CAAC5B,YAAY,CAAC6B,IAAI,CAAC;MAAED,QAAQ;MAAEE,SAAS,EAAE,sBAAsB;MAAEC,KAAK,EAAE;IAAK,CAAE,CAAC;EACtF;EAEC,IAAI3B,OAAOA,CAAA;IACT,OAAO,IAAI,CAACH,eAAe,CAACwB,GAAG,CAAC,SAAS,CAAC;EAC5C;EAEA,IAAIvB,SAASA,CAAA;IACX,OAAO,IAAI,CAACD,eAAe,CAACwB,GAAG,CAAC,WAAW,CAAC;EAC9C;EAEAQ,WAAWA,CAAA;IACT,IAAI,CAACjC,YAAY,CAACkC,KAAK,EAAE;EAC3B;CACD;AA/CCC,UAAA,EAFC7C,SAAS,CAAC,YAAY,EAAE;EAAC8C,IAAI,EAAE/C;AAAW,CAAC,CAAC,C,mDAO5C;AAtBUK,oBAAoB,GAAAyC,UAAA,EALhC/C,SAAS,CAAC;EACTiD,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACW7C,oBAAoB,CAgEhC;SAhEYA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}