{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BASE_URL = 'http://localhost:3000/balance';\nclass BalanceService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  getMyBalancesByGroupId(groupId) {\n    return this.http.get(BASE_URL + `/${groupId}`);\n  }\n  static #_ = this.ɵfac = function BalanceService_Factory(t) {\n    return new (t || BalanceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BalanceService,\n    factory: BalanceService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { BalanceService };","map":{"version":3,"names":["BASE_URL","BalanceService","constructor","http","router","getMyBalancesByGroupId","groupId","get","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\balance.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BalanceDTO } from '../balance/dto';\n\nconst BASE_URL = 'http://localhost:3000/balance'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BalanceService {\n\n  constructor(private http: HttpClient, private router:Router) { }\n\n  getMyBalancesByGroupId(groupId: number){\n    return this.http.get<BalanceDTO[]>(BASE_URL + `/${groupId}`)\n  }\n}\n"],"mappings":";;;AAKA,MAAMA,QAAQ,GAAG,+BAA+B;AAEhD,MAGaC,cAAc;EAEzBC,YAAoBC,IAAgB,EAAUC,MAAa;IAAvC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAE/DC,sBAAsBA,CAACC,OAAe;IACpC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAeP,QAAQ,GAAG,IAAIM,OAAO,EAAE,CAAC;EAC9D;EAAC,QAAAE,CAAA,G;qBANUP,cAAc,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdd,cAAc;IAAAe,OAAA,EAAdf,cAAc,CAAAgB,IAAA;IAAAC,UAAA,EAFb;EAAM;;SAEPjB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}