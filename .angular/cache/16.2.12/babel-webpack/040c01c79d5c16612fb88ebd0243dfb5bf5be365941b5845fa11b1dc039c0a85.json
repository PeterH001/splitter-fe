{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet CreateExpenseComponent = class CreateExpenseComponent {\n  // memberProportions: { [groupMemberId: number]: number } = {};\n  constructor(expenseService, groupService, route, router, formBuilder) {\n    this.expenseService = expenseService;\n    this.groupService = groupService;\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.selectedGroupMembers = [];\n    this.createGroupForm = this.formBuilder.group({\n      name: new FormControl('', [Validators.required]),\n      payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n      groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n      amount: new FormControl('', Validators.required),\n      currency: new FormControl('', Validators.required),\n      category: new FormControl('', Validators.required),\n      distributionType: new FormControl('', Validators.required),\n      description: new FormControl(''),\n      userIds: new FormControl([], [Validators.required, Validators.minLength(1)]),\n      memberProportions: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.expenseService.getExpenseCategories().subscribe(result => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n    const memberControls = {};\n    this.groupService.getGroupMembers(this.groupId).subscribe(result => {\n      this.groupMembers = result;\n      //ahány groupmember van, annyi percentes formcontrolt hozok létre és hozzáadom a formgroupomhoz\n      this.groupMembers.forEach(member => {\n        this.createGroupForm.controls['memberProportions'].push(this.createProportionMemberFormGroup(member));\n      });\n    });\n    this.expenseService.getCurrencies().subscribe(result => {\n      this.currencies = result;\n    });\n    this.expenseService.getExpenseDistributions().subscribe(result => {\n      this.distributionTypes = result;\n      console.log(this.distributionTypes);\n    });\n  }\n  createProportionMemberFormGroup(member) {\n    return this.formBuilder.group({\n      id: [member.id],\n      name: [member.name],\n      percent: ['']\n    });\n  }\n  toggleSelection(userId) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(item => item !== userId);\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n  updatePercent(memberIndex, percent) {\n    const selectedMembersFormArray = this.createGroupForm.controls['memberProportions'];\n    const memberFormGroup = selectedMembersFormArray.at(memberIndex);\n    const percentControl = memberFormGroup.controls['percent'];\n    if (percent > 0) {\n      percentControl.setValue(percent);\n    } else {\n      percentControl.setValue(null);\n    }\n  }\n  isChecked(id) {\n    return this.selectedGroupMembers.find(userId => userId === id) ? true : false;\n  }\n  goBack() {\n    this.router.navigate(['/groupdetails', this.groupId]);\n  }\n  submitForm() {\n    // console.log(this.createGroupForm.value);\n    this.expenseService.createExpense(this.createGroupForm.value).subscribe(() => {\n      this.router.navigate(['/groupdetails', this.groupId]);\n    });\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n  get currency() {\n    return this.createGroupForm.get('currency');\n  }\n  get amount() {\n    return this.createGroupForm.get('amount');\n  }\n  get payerId() {\n    return this.createGroupForm.get('payerId');\n  }\n  get category() {\n    return this.createGroupForm.get('category');\n  }\n  get distributionType() {\n    return this.createGroupForm.get('distributionType');\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n};\nCreateExpenseComponent = __decorate([Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css']\n})], CreateExpenseComponent);\nexport { CreateExpenseComponent };","map":{"version":3,"names":["Component","FormControl","Validators","CreateExpenseComponent","constructor","expenseService","groupService","route","router","formBuilder","selectedGroupMembers","createGroupForm","group","name","required","payerId","min","groupId","amount","currency","category","distributionType","description","userIds","minLength","memberProportions","array","ngOnInit","getExpenseCategories","subscribe","result","categories","console","log","snapshot","paramMap","get","parseInt","groupIdControl","setValue","memberControls","getGroupMembers","groupMembers","forEach","member","controls","push","createProportionMemberFormGroup","getCurrencies","currencies","getExpenseDistributions","distributionTypes","id","percent","toggleSelection","userId","includes","filter","item","updatePercent","memberIndex","selectedMembersFormArray","memberFormGroup","at","percentControl","isChecked","find","goBack","navigate","submitForm","createExpense","value","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\expense\\create-expense\\create-expense.component.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ExpenseService } from 'src/app/services/expense.service';\nimport { GroupService } from 'src/app/services/group.service';\nimport { distributionTypesEnumMappings as distributionTypesEnumMappings } from '../enum';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css'],\n})\nexport class CreateExpenseComponent implements OnInit {\n  createGroupForm: FormGroup;\n  // new FormGroup({\n  //   name: new FormControl('', [Validators.required]),\n  //   payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n  //   groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n  //   amount: new FormControl('', Validators.required),\n  //   currency: new FormControl('', Validators.required),\n  //   category: new FormControl('', Validators.required),\n  //   distributionType: new FormControl('', Validators.required),\n  //   description: new FormControl(''),\n  //   userIds: new FormControl<number[]>(\n  //     [],\n  //     [Validators.required, Validators.minLength(1)]\n  //   ),\n  // });\n\n  groupId!: number;\n  categories!: string[];\n  distributionTypes!: string[];\n  currencies!: string[];\n  groupMembers!: { id: number; username: string }[];\n\n  selectedGroupMembers: number[] = [];\n  // memberProportions: { [groupMemberId: number]: number } = {};\n  constructor(\n    private expenseService: ExpenseService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n    this.createGroupForm = this.formBuilder.group({\n      name: new FormControl('', [Validators.required]),\n      payerId: new FormControl(-1, [Validators.required, Validators.min(0)]),\n      groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n      amount: new FormControl('', Validators.required),\n      currency: new FormControl('', Validators.required),\n      category: new FormControl('', Validators.required),\n      distributionType: new FormControl('', Validators.required),\n      description: new FormControl(''),\n      userIds: new FormControl<number[]>(\n        [],\n        [Validators.required, Validators.minLength(1)]\n      ),\n      memberProportions: this.formBuilder.array([]),\n    });\n  }\n  ngOnInit(): void {\n    this.expenseService.getExpenseCategories().subscribe((result) => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId!);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n\n    const memberControls: any = {};\n    this.groupService.getGroupMembers(this.groupId).subscribe((result) => {\n      this.groupMembers = result;\n\n      //ahány groupmember van, annyi percentes formcontrolt hozok létre és hozzáadom a formgroupomhoz\n      this.groupMembers.forEach((member) => {\n        (this.createGroupForm.controls['memberProportions'] as FormArray).push(\n          this.createProportionMemberFormGroup(member)\n        );\n      });\n    });\n\n    this.expenseService.getCurrencies().subscribe((result) => {\n      this.currencies = result;\n    });\n    this.expenseService.getExpenseDistributions().subscribe((result) => {\n      this.distributionTypes = result;\n      console.log(this.distributionTypes);\n    });\n  }\n\n  createProportionMemberFormGroup(member: any): FormGroup {\n    return this.formBuilder.group({\n      id: [member.id],\n      name: [member.name],\n      percent: [''],\n    });\n  }\n\n  toggleSelection(userId: number) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(\n        (item) => item !== userId\n      );\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('userIds')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n\n  updatePercent(memberIndex: number, percent: number) {\n    const selectedMembersFormArray = this.createGroupForm.controls['memberProportions'] as FormArray;\n    const memberFormGroup = selectedMembersFormArray.at(memberIndex) as FormGroup;\n    const percentControl = memberFormGroup.controls['percent'];\n\n    if (percent > 0) {\n      percentControl.setValue(percent);\n    } else {\n      percentControl.setValue(null);\n    }\n  }\n\n  isChecked(id: number) {\n    return this.selectedGroupMembers.find((userId) => userId === id)\n      ? true\n      : false;\n  }\n\n  goBack() {\n    this.router.navigate(['/groupdetails', this.groupId]);\n  }\n\n  submitForm(): void {\n    // console.log(this.createGroupForm.value);\n\n    this.expenseService\n      .createExpense(this.createGroupForm.value)\n      .subscribe(() => {\n        this.router.navigate(['/groupdetails', this.groupId]);\n      });\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n  get currency() {\n    return this.createGroupForm.get('currency');\n  }\n  get amount() {\n    return this.createGroupForm.get('amount');\n  }\n  get payerId() {\n    return this.createGroupForm.get('payerId');\n  }\n  get category() {\n    return this.createGroupForm.get('category');\n  }\n  get distributionType() {\n    return this.createGroupForm.get('distributionType');\n  }\n  get userIds() {\n    return this.createGroupForm.get('userIds');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}