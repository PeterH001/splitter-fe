{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { distributionTypesEnumMappings } from '../enum';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet CreateExpenseComponent = class CreateExpenseComponent {\n  onChange(value) {}\n  logData() {}\n  constructor(expenseService, groupService, location, route) {\n    this.expenseService = expenseService;\n    this.groupService = groupService;\n    this.location = location;\n    this.route = route;\n    this.createGroupForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      paidBy: new FormControl('', Validators.required),\n      groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n      amount: new FormControl('', Validators.required),\n      currency: new FormControl('', Validators.required),\n      category: new FormControl('', Validators.required),\n      distributionType: new FormControl('', Validators.required),\n      description: new FormControl(''),\n      members: new FormControl([], Validators.required)\n    });\n    this.selectedGroupMembers = [];\n    this.distributionTypes = Object.values(distributionTypesEnumMappings);\n  }\n  ngOnInit() {\n    this.expenseService.getExpenseCategories().subscribe(result => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n    this.groupService.getGroupMembers(this.groupId).subscribe(result => {\n      this.groupMembers = result;\n    });\n    this.expenseService.getCurrencies().subscribe(result => {\n      this.currencies = result;\n    });\n    // this.expenseService.getExpenseDistributions().subscribe(result=>{\n    //   this.distributionTypes = result;\n    // })\n    // this.createGroupForm = this.formBuilder.group({\n    //   category: [this.categories[0]]\n    // })\n  }\n\n  toggleSelection(userId) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(item => item !== userId);\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('members')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n  goBack() {\n    this.location.back();\n  }\n  submitForm() {\n    console.log('Form data:', this.createGroupForm.value);\n    // Add your form submission logic here\n  }\n\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n};\nCreateExpenseComponent = __decorate([Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css']\n})], CreateExpenseComponent);\nexport { CreateExpenseComponent };","map":{"version":3,"names":["Component","distributionTypesEnumMappings","FormControl","FormGroup","Validators","CreateExpenseComponent","onChange","value","logData","constructor","expenseService","groupService","location","route","createGroupForm","name","required","paidBy","groupId","min","amount","currency","category","distributionType","description","members","selectedGroupMembers","distributionTypes","Object","values","ngOnInit","getExpenseCategories","subscribe","result","categories","console","log","snapshot","paramMap","get","parseInt","groupIdControl","setValue","getGroupMembers","groupMembers","getCurrencies","currencies","toggleSelection","userId","includes","filter","item","push","goBack","back","submitForm","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\expense\\create-expense\\create-expense.component.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ExpenseService } from 'src/app/services/expense.service';\nimport { GroupService } from 'src/app/services/group.service';\nimport { distributionTypesEnumMappings as distributionTypesEnumMappings } from '../enum';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-create-expense',\n  templateUrl: './create-expense.component.html',\n  styleUrls: ['./create-expense.component.css'],\n})\nexport class CreateExpenseComponent implements OnInit {\n  onChange(value: any) {}\n  logData() {}\n  createGroupForm = new FormGroup({\n    name: new FormControl('', Validators.required),\n    paidBy: new FormControl('', Validators.required),\n    groupId: new FormControl(-1, [Validators.min(0), Validators.required]),\n    amount: new FormControl('', Validators.required),\n    currency: new FormControl('', Validators.required),\n    category: new FormControl('', Validators.required),\n    distributionType: new FormControl('', Validators.required),\n    description: new FormControl(''),\n    members: new FormControl<number[]>([], Validators.required),\n  });\n\n  groupMembers!: { id: number; username: string }[];\n  selectedGroupMembers: number[] = [];\n  groupId!: number;\n  categories!: string[];\n  distributionTypes: string[] = Object.values(distributionTypesEnumMappings);\n  currencies!: string[];\n  constructor(\n    private expenseService: ExpenseService,\n    private groupService: GroupService,\n    private location: Location,\n    private route: ActivatedRoute\n  ) {}\n  ngOnInit(): void {\n    this.expenseService.getExpenseCategories().subscribe((result) => {\n      this.categories = result;\n      console.log(this.categories);\n    });\n    const groupId = this.route.snapshot.paramMap.get('id');\n    this.groupId = parseInt(groupId!);\n    const groupIdControl = this.createGroupForm.get('groupId');\n    if (groupIdControl !== null) {\n      groupIdControl.setValue(this.groupId);\n    }\n\n    this.groupService.getGroupMembers(this.groupId).subscribe((result) => {\n      this.groupMembers = result;\n    });\n\n    this.expenseService.getCurrencies().subscribe((result) => {\n      this.currencies = result;\n    });\n    // this.expenseService.getExpenseDistributions().subscribe(result=>{\n    //   this.distributionTypes = result;\n    // })\n    // this.createGroupForm = this.formBuilder.group({\n    //   category: [this.categories[0]]\n    // })\n  }\n\n  toggleSelection(userId: number) {\n    if (this.selectedGroupMembers.includes(userId)) {\n      this.selectedGroupMembers = this.selectedGroupMembers.filter(\n        (item) => item !== userId\n      );\n    } else {\n      this.selectedGroupMembers.push(userId);\n    }\n    this.createGroupForm.get('members')?.setValue(this.selectedGroupMembers);\n    console.log('this.selectedGroupMembers: ', this.selectedGroupMembers);\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n  submitForm(): void {\n    console.log('Form data:', this.createGroupForm.value);\n    // Add your form submission logic here\n  }\n  get name() {\n    return this.createGroupForm.get('name');\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AAIjD,SAASC,6BAA8D,QAAQ,SAAS;AACxF,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAOnE,IAAaC,sBAAsB,GAAnC,MAAaA,sBAAsB;EACjCC,QAAQA,CAACC,KAAU,GAAG;EACtBC,OAAOA,CAAA,GAAI;EAmBXC,YACUC,cAA8B,EAC9BC,YAA0B,EAC1BC,QAAkB,EAClBC,KAAqB;IAHrB,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,KAAK,GAALA,KAAK;IAtBf,KAAAC,eAAe,GAAG,IAAIX,SAAS,CAAC;MAC9BY,IAAI,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACY,QAAQ,CAAC;MAC9CC,MAAM,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACY,QAAQ,CAAC;MAChDE,OAAO,EAAE,IAAIhB,WAAW,CAAC,CAAC,CAAC,EAAE,CAACE,UAAU,CAACe,GAAG,CAAC,CAAC,CAAC,EAAEf,UAAU,CAACY,QAAQ,CAAC,CAAC;MACtEI,MAAM,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACY,QAAQ,CAAC;MAChDK,QAAQ,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACY,QAAQ,CAAC;MAClDM,QAAQ,EAAE,IAAIpB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACY,QAAQ,CAAC;MAClDO,gBAAgB,EAAE,IAAIrB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACY,QAAQ,CAAC;MAC1DQ,WAAW,EAAE,IAAItB,WAAW,CAAC,EAAE,CAAC;MAChCuB,OAAO,EAAE,IAAIvB,WAAW,CAAW,EAAE,EAAEE,UAAU,CAACY,QAAQ;KAC3D,CAAC;IAGF,KAAAU,oBAAoB,GAAa,EAAE;IAGnC,KAAAC,iBAAiB,GAAaC,MAAM,CAACC,MAAM,CAAC5B,6BAA6B,CAAC;EAOvE;EACH6B,QAAQA,CAAA;IACN,IAAI,CAACpB,cAAc,CAACqB,oBAAoB,EAAE,CAACC,SAAS,CAAEC,MAAM,IAAI;MAC9D,IAAI,CAACC,UAAU,GAAGD,MAAM;MACxBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,UAAU,CAAC;IAC9B,CAAC,CAAC;IACF,MAAMhB,OAAO,GAAG,IAAI,CAACL,KAAK,CAACwB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACtD,IAAI,CAACrB,OAAO,GAAGsB,QAAQ,CAACtB,OAAQ,CAAC;IACjC,MAAMuB,cAAc,GAAG,IAAI,CAAC3B,eAAe,CAACyB,GAAG,CAAC,SAAS,CAAC;IAC1D,IAAIE,cAAc,KAAK,IAAI,EAAE;MAC3BA,cAAc,CAACC,QAAQ,CAAC,IAAI,CAACxB,OAAO,CAAC;;IAGvC,IAAI,CAACP,YAAY,CAACgC,eAAe,CAAC,IAAI,CAACzB,OAAO,CAAC,CAACc,SAAS,CAAEC,MAAM,IAAI;MACnE,IAAI,CAACW,YAAY,GAAGX,MAAM;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACvB,cAAc,CAACmC,aAAa,EAAE,CAACb,SAAS,CAAEC,MAAM,IAAI;MACvD,IAAI,CAACa,UAAU,GAAGb,MAAM;IAC1B,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;EACF;;EAEAc,eAAeA,CAACC,MAAc;IAC5B,IAAI,IAAI,CAACtB,oBAAoB,CAACuB,QAAQ,CAACD,MAAM,CAAC,EAAE;MAC9C,IAAI,CAACtB,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACwB,MAAM,CACzDC,IAAI,IAAKA,IAAI,KAAKH,MAAM,CAC1B;KACF,MAAM;MACL,IAAI,CAACtB,oBAAoB,CAAC0B,IAAI,CAACJ,MAAM,CAAC;;IAExC,IAAI,CAAClC,eAAe,CAACyB,GAAG,CAAC,SAAS,CAAC,EAAEG,QAAQ,CAAC,IAAI,CAAChB,oBAAoB,CAAC;IACxES,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACV,oBAAoB,CAAC;EACvE;EAEA2B,MAAMA,CAAA;IACJ,IAAI,CAACzC,QAAQ,CAAC0C,IAAI,EAAE;EACtB;EAEAC,UAAUA,CAAA;IACRpB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAACtB,eAAe,CAACP,KAAK,CAAC;IACrD;EACF;;EACA,IAAIQ,IAAIA,CAAA;IACN,OAAO,IAAI,CAACD,eAAe,CAACyB,GAAG,CAAC,MAAM,CAAC;EACzC;CACD;AA7EYlC,sBAAsB,GAAAmD,UAAA,EALlCxD,SAAS,CAAC;EACTyD,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACWtD,sBAAsB,CA6ElC;SA7EYA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}