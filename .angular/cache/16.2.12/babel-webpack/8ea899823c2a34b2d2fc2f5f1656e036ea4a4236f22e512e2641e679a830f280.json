{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ExpenseService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/expense';\n  }\n  getExpenseById(id) {\n    return this.http.get(this.baseUrl + `/${id}`);\n  }\n  getExpenseCategories() {\n    return this.http.get(this.baseUrl + `/categories`);\n  }\n  getExpenseDistributions() {\n    return this.http.get(this.baseUrl + `/distributiontypes`);\n  }\n  getCurrencies() {\n    return this.http.get(this.baseUrl + `/currencies`);\n  }\n  createExpense(createExpenseData) {\n    console.log(\"createExpense called\");\n    console.log(createExpenseData);\n    createExpenseData.payerId = parseInt(createExpenseData.payerId);\n    console.log(createExpenseData);\n    // this.http.post(this.baseUrl, createExpenseData).subscribe();\n  }\n  static #_ = this.ɵfac = function ExpenseService_Factory(t) {\n    return new (t || ExpenseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExpenseService,\n    factory: ExpenseService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ExpenseService };","map":{"version":3,"names":["ExpenseService","constructor","http","baseUrl","getExpenseById","id","get","getExpenseCategories","getExpenseDistributions","getCurrencies","createExpense","createExpenseData","console","log","payerId","parseInt","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\expense.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpenseService {\n  private baseUrl: string = 'http://localhost:3000/expense';\n  \n  constructor(private http: HttpClient) {}\n  \n  getExpenseById(id: number) {\n    return this.http.get(this.baseUrl + `/${id}`);\n  }\n  \n  getExpenseCategories() {\n    return this.http.get<string[]>(this.baseUrl + `/categories`);\n  }\n  \n  getExpenseDistributions() {\n    return this.http.get<string[]>(this.baseUrl + `/distributiontypes`);\n  }\n  \n  getCurrencies() {\n    return this.http.get<string[]>(this.baseUrl + `/currencies`);\n  }\n\n  createExpense(createExpenseData: Partial<{ name: string | null; payerId: number | string | null; groupId: number | null; amount: string | null; currency: string | null; category: string | null; distributionType: string | null; description: string | null; userIds: number[] | null; }>) {\n    console.log(\"createExpense called\");\n    console.log(createExpenseData);\n    \n    createExpenseData.payerId = parseInt(createExpenseData.payerId as string)\n    console.log(createExpenseData);\n    // this.http.post(this.baseUrl, createExpenseData).subscribe();\n  }\n}\n"],"mappings":";;AAIA,MAGaA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAW,+BAA+B;EAElB;EAEvCC,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACH,OAAO,GAAG,IAAIE,EAAE,EAAE,CAAC;EAC/C;EAEAE,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACL,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,aAAa,CAAC;EAC9D;EAEAK,uBAAuBA,CAAA;IACrB,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,oBAAoB,CAAC;EACrE;EAEAM,aAAaA,CAAA;IACX,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,aAAa,CAAC;EAC9D;EAEAO,aAAaA,CAACC,iBAA6Q;IACzRC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCD,OAAO,CAACC,GAAG,CAACF,iBAAiB,CAAC;IAE9BA,iBAAiB,CAACG,OAAO,GAAGC,QAAQ,CAACJ,iBAAiB,CAACG,OAAiB,CAAC;IACzEF,OAAO,CAACC,GAAG,CAACF,iBAAiB,CAAC;IAC9B;EACF;EAAC,QAAAK,CAAA,G;qBA5BUhB,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;IAAAC,UAAA,EAFb;EAAM;;SAEPxB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}