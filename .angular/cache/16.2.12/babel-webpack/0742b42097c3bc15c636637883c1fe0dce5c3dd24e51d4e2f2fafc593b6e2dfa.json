{"ast":null,"code":"import { Directive, TemplateRef, EventEmitter, Component, Input, Output, ContentChild, ContentChildren, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableHeaderDirective {\n  constructor() {}\n}\nNgbTableHeaderDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableHeader]'\n  }]\n}];\n/** @nocollapse */\nNgbTableHeaderDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableSubheaderDirective {\n  /**\n   * @param {?} templateRef\n   */\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nNgbTableSubheaderDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableSubheader]'\n  }]\n}];\n/** @nocollapse */\nNgbTableSubheaderDirective.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableSelectActionsHeaderDirective {\n  constructor() {}\n}\nNgbTableSelectActionsHeaderDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableSelectActionsHeader]'\n  }]\n}];\n/** @nocollapse */\nNgbTableSelectActionsHeaderDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableHeadDirective {\n  constructor() {}\n}\nNgbTableHeadDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableHead]'\n  }]\n}];\n/** @nocollapse */\nNgbTableHeadDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableBodyRowDirective {\n  constructor() {}\n}\nNgbTableBodyRowDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableBodyRow]'\n  }]\n}];\n/** @nocollapse */\nNgbTableBodyRowDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableFooterRowDirective {\n  /**\n   * @param {?} templateRef\n   */\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nNgbTableFooterRowDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableFooterRow]'\n  }]\n}];\n/** @nocollapse */\nNgbTableFooterRowDirective.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableFooterDirective {\n  constructor() {}\n}\nNgbTableFooterDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ngbTableFooter]'\n  }]\n}];\n/** @nocollapse */\nNgbTableFooterDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableComponent {\n  constructor() {\n    this.rowIdColumnName = 'id';\n    this.selectable = false;\n    this.selectedRowsIds = [];\n    this.selectedRowsIdsChange = new EventEmitter();\n    this.canSelectRowPredicate =\n    /**\n    * @return {?}\n    */\n    () => true;\n    this.rowTracker =\n    /**\n    * @param {?} index\n    * @param {?} row\n    * @return {?}\n    */\n    (index, row) => {\n      /** @type {?} */\n      const rowId = row[this.rowIdColumnName];\n      return rowId + this.rows.length;\n    };\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {}\n  /*\n     * Row selection specific methods:\n     */\n  /**\n   * @param {?} row\n   * @return {?}\n   */\n  isRowSelected(row) {\n    /** @type {?} */\n    const rowId = row[this.rowIdColumnName];\n    return this.selectedRowsIds.indexOf(rowId) > -1;\n  }\n  /**\n   * @param {?} row\n   * @return {?}\n   */\n  selectRow(row) {\n    /** @type {?} */\n    const rowId = row[this.rowIdColumnName];\n    /** @type {?} */\n    const newSelectedRows = [...this.selectedRowsIds, rowId];\n    this.selectedRowsIdsChange.emit(newSelectedRows);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  selectAllSelectableRows() {\n    /** @type {?} */\n    const newSelectedRows = [];\n    this.rows.forEach(\n    /**\n    * @param {?} row\n    * @return {?}\n    */\n    row => {\n      /** @type {?} */\n      const rowId = row[this.rowIdColumnName];\n      if (this.canSelectRowPredicate(row)) {\n        newSelectedRows.push(rowId);\n      }\n    });\n    this.selectedRowsIdsChange.emit(newSelectedRows);\n  }\n  /**\n   * @param {?} row\n   * @return {?}\n   */\n  unselectRow(row) {\n    /** @type {?} */\n    const rowId = row[this.rowIdColumnName];\n    /** @type {?} */\n    const indexOfRowId = this.selectedRowsIds.indexOf(rowId);\n    /** @type {?} */\n    const newSelectedRows = [...this.selectedRowsIds];\n    newSelectedRows.splice(indexOfRowId, 1);\n    this.selectedRowsIdsChange.emit(newSelectedRows);\n  }\n  /**\n   * @return {?}\n   */\n  unselectAllRows() {\n    this.selectedRowsIdsChange.emit([]);\n  }\n  /**\n   * @param {?} row\n   * @return {?}\n   */\n  toggleRowSelection(row) {\n    if (this.isRowSelected(row)) {\n      this.unselectRow(row);\n    } else {\n      this.selectRow(row);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  toggleSelectAllRows() {\n    if (this.areAllSelectableRowsSelected) {\n      this.unselectAllRows();\n    } else {\n      this.selectAllSelectableRows();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  get areAllSelectableRowsSelected() {\n    /** @type {?} */\n    let selectedRowsCount = 0;\n    this.rows.forEach(\n    /**\n    * @param {?} row\n    * @return {?}\n    */\n    row => {\n      /** @type {?} */\n      const rowId = row[this.rowIdColumnName];\n      if (this.selectedRowsIds.indexOf(rowId) > -1) {\n        selectedRowsCount++;\n      }\n    });\n    /** @type {?} */\n    const selectableRows = this.rows.filter(this.canSelectRowPredicate);\n    return selectedRowsCount === selectableRows.length && selectableRows.length;\n  }\n}\nNgbTableComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ngb-table',\n    template: \"<div class=\\\"card ngbTableRoot\\\" [ngClass]=\\\"{'border-primary': selectedRowsIds.length }\\\">\\n  <div class=\\\"card-header\\\" [ngClass]=\\\"{'bg-primary text-light': selectedRowsIds.length && selectActionsHeaderTemplate}\\\"\\n    *ngIf=\\\"headerTemplate\\\">\\n    <ng-container *ngIf=\\\"selectedRowsIds.length && selectActionsHeaderTemplate; else noRowsSelected\\\">\\n      <ng-container *ngTemplateOutlet=\\\"selectActionsHeaderTemplate\\\"></ng-container>\\n    </ng-container>\\n    <ng-template #noRowsSelected>\\n      <ng-container *ngTemplateOutlet=\\\"headerTemplate\\\"></ng-container>\\n    </ng-template>\\n  </div>\\n\\n  <ng-container *ngFor=\\\"let subHeaderTemplate of subheaderTemplates\\\">\\n    <div class=\\\"card-header\\\">\\n      <ng-container *ngTemplateOutlet=\\\"subHeaderTemplate.templateRef\\\"></ng-container>\\n    </div>\\n  </ng-container>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table m-0\\\">\\n\\n      <thead>\\n        <tr>\\n          <th class=\\\"w-01 align-top\\\" *ngIf=\\\"selectable\\\">\\n            <ngb-checkbox [checked]=\\\"areAllSelectableRowsSelected\\\" [disabled]=\\\"!rows.length\\\" (checkChange)=\\\"toggleSelectAllRows()\\\">\\n            </ngb-checkbox>\\n          </th>\\n          <ng-container *ngTemplateOutlet=\\\"headTemplate\\\"></ng-container>\\n        </tr>\\n      </thead>\\n\\n      <tbody>\\n        <ng-container *ngIf=\\\"rows.length\\\">\\n          <ng-container *ngFor=\\\"let row of rows; trackBy: rowTracker\\\">\\n            <tr [ngClass]=\\\"{'table-primary': isRowSelected(row)}\\\">\\n              <td class=\\\"align-middle\\\" *ngIf=\\\"selectable\\\">\\n                <ngb-checkbox\\n                  [disabled]=\\\"!canSelectRowPredicate(row)\\\"\\n                  [checked]=\\\"isRowSelected(row)\\\"\\n                  (checkChange)=\\\"toggleRowSelection(row)\\\"\\n                ></ngb-checkbox>\\n              </td>\\n              <ng-container *ngTemplateOutlet=\\\"bodyRowTemplate; context: { $implicit: row }\\\"></ng-container>\\n            </tr>\\n          </ng-container>\\n          <ng-container *ngFor=\\\"let footerRowTemplate of footerRowTemplates\\\">\\n            <tr>\\n              <td *ngIf=\\\"selectable\\\"></td><!-- empty table cell to fill no checkbox space -->\\n              <ng-container *ngTemplateOutlet=\\\"footerRowTemplate.templateRef\\\"></ng-container>\\n            </tr>\\n          </ng-container>\\n        </ng-container>\\n      </tbody>\\n\\n    </table>\\n  </div>\\n\\n  <div class=\\\"card-footer\\\" *ngIf=\\\"footerTemplate\\\">\\n    <ng-container *ngTemplateOutlet=\\\"footerTemplate\\\"></ng-container>\\n  </div>\\n\\n</div>\",\n    styles: [\".w-01{width:1%}\"]\n  }]\n}];\n/** @nocollapse */\nNgbTableComponent.ctorParameters = () => [];\nNgbTableComponent.propDecorators = {\n  rows: [{\n    type: Input\n  }],\n  rowIdColumnName: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  selectedRowsIds: [{\n    type: Input\n  }],\n  selectedRowsIdsChange: [{\n    type: Output\n  }],\n  headerTemplate: [{\n    type: ContentChild,\n    args: [NgbTableHeaderDirective, {\n      static: false,\n      read: TemplateRef\n    }]\n  }],\n  subheaderTemplates: [{\n    type: ContentChildren,\n    args: [NgbTableSubheaderDirective, {\n      descendants: false\n    }]\n  }],\n  selectActionsHeaderTemplate: [{\n    type: ContentChild,\n    args: [NgbTableSelectActionsHeaderDirective, {\n      static: false,\n      read: TemplateRef\n    }]\n  }],\n  headTemplate: [{\n    type: ContentChild,\n    args: [NgbTableHeadDirective, {\n      static: false,\n      read: TemplateRef\n    }]\n  }],\n  bodyRowTemplate: [{\n    type: ContentChild,\n    args: [NgbTableBodyRowDirective, {\n      static: false,\n      read: TemplateRef\n    }]\n  }],\n  footerRowTemplates: [{\n    type: ContentChildren,\n    args: [NgbTableFooterRowDirective, {\n      descendants: false\n    }]\n  }],\n  footerTemplate: [{\n    type: ContentChild,\n    args: [NgbTableFooterDirective, {\n      static: false,\n      read: TemplateRef\n    }]\n  }],\n  canSelectRowPredicate: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CheckboxComponent {\n  constructor() {\n    this.disabled = false;\n    this.checkChange = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n  toggleChecked() {\n    this.checkChange.emit(!this.checked);\n  }\n}\nCheckboxComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ngb-checkbox',\n    template: \"<div\\n  class=\\\"checkbox\\\"\\n  [ngClass]=\\\"{\\n    'checked': checked,\\n    'disabled': disabled\\n  }\\\"\\n  (click)=\\\"disabled ? null : toggleChecked()\\\"\\n></div>\\n\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".checkbox{position:relative;width:22px;height:22px;border:2px solid var(--secondary);opacity:.7;border-radius:3px}.checkbox:after{position:absolute;top:3px;left:6px;content:\\\"\\\";width:6px;height:11px;border-bottom:2px solid transparent;border-right:2px solid transparent;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox:hover:not(.disabled){opacity:1;cursor:pointer}.checkbox.checked{border-color:var(--primary);background:var(--primary);opacity:1}.checkbox.checked:after{border-bottom-color:var(--white);border-right-color:var(--white)}.checkbox.disabled{opacity:.5}\"]\n  }]\n}];\n/** @nocollapse */\nCheckboxComponent.ctorParameters = () => [];\nCheckboxComponent.propDecorators = {\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  checkChange: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableModule {}\nNgbTableModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [NgbTableComponent, NgbTableHeaderDirective, NgbTableSubheaderDirective, NgbTableSelectActionsHeaderDirective, NgbTableHeadDirective, NgbTableBodyRowDirective, NgbTableFooterDirective, NgbTableFooterRowDirective, CheckboxComponent],\n    imports: [CommonModule],\n    exports: [NgbTableComponent, NgbTableHeaderDirective, NgbTableSubheaderDirective, NgbTableSelectActionsHeaderDirective, NgbTableHeadDirective, NgbTableBodyRowDirective, NgbTableFooterDirective, NgbTableFooterRowDirective]\n  }]\n}];\nexport { NgbTableModule, NgbTableComponent as ɵa, NgbTableHeaderDirective as ɵb, NgbTableSubheaderDirective as ɵc, NgbTableSelectActionsHeaderDirective as ɵd, NgbTableHeadDirective as ɵe, NgbTableBodyRowDirective as ɵf, NgbTableFooterRowDirective as ɵg, NgbTableFooterDirective as ɵh, CheckboxComponent as ɵi };","map":{"version":3,"names":["Directive","TemplateRef","EventEmitter","Component","Input","Output","ContentChild","ContentChildren","ChangeDetectionStrategy","NgModule","CommonModule","NgbTableHeaderDirective","constructor","decorators","type","args","selector","ctorParameters","NgbTableSubheaderDirective","templateRef","NgbTableSelectActionsHeaderDirective","NgbTableHeadDirective","NgbTableBodyRowDirective","NgbTableFooterRowDirective","NgbTableFooterDirective","NgbTableComponent","rowIdColumnName","selectable","selectedRowsIds","selectedRowsIdsChange","canSelectRowPredicate","rowTracker","index","row","rowId","rows","length","ngOnInit","isRowSelected","indexOf","selectRow","newSelectedRows","emit","selectAllSelectableRows","forEach","push","unselectRow","indexOfRowId","splice","unselectAllRows","toggleRowSelection","toggleSelectAllRows","areAllSelectableRowsSelected","selectedRowsCount","selectableRows","filter","template","styles","propDecorators","headerTemplate","static","read","subheaderTemplates","descendants","selectActionsHeaderTemplate","headTemplate","bodyRowTemplate","footerRowTemplates","footerTemplate","CheckboxComponent","disabled","checkChange","toggleChecked","checked","changeDetection","OnPush","NgbTableModule","declarations","imports","exports","ɵa","ɵb","ɵc","ɵd","ɵe","ɵf","ɵg","ɵh","ɵi"],"sources":["C:/Users/Peti/nest_projects/splitwise/frontend/splitter-fe/node_modules/ngb-table/fesm2015/ngb-table.js"],"sourcesContent":["import { Directive, TemplateRef, EventEmitter, Component, Input, Output, ContentChild, ContentChildren, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableHeaderDirective {\n    constructor() { }\n}\nNgbTableHeaderDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableHeader]'\n            },] }\n];\n/** @nocollapse */\nNgbTableHeaderDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableSubheaderDirective {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nNgbTableSubheaderDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableSubheader]'\n            },] }\n];\n/** @nocollapse */\nNgbTableSubheaderDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableSelectActionsHeaderDirective {\n    constructor() { }\n}\nNgbTableSelectActionsHeaderDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableSelectActionsHeader]'\n            },] }\n];\n/** @nocollapse */\nNgbTableSelectActionsHeaderDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableHeadDirective {\n    constructor() { }\n}\nNgbTableHeadDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableHead]'\n            },] }\n];\n/** @nocollapse */\nNgbTableHeadDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableBodyRowDirective {\n    constructor() { }\n}\nNgbTableBodyRowDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableBodyRow]'\n            },] }\n];\n/** @nocollapse */\nNgbTableBodyRowDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableFooterRowDirective {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nNgbTableFooterRowDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableFooterRow]'\n            },] }\n];\n/** @nocollapse */\nNgbTableFooterRowDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableFooterDirective {\n    constructor() { }\n}\nNgbTableFooterDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngbTableFooter]'\n            },] }\n];\n/** @nocollapse */\nNgbTableFooterDirective.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableComponent {\n    constructor() {\n        this.rowIdColumnName = 'id';\n        this.selectable = false;\n        this.selectedRowsIds = [];\n        this.selectedRowsIdsChange = new EventEmitter();\n        this.canSelectRowPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        this.rowTracker = (/**\n         * @param {?} index\n         * @param {?} row\n         * @return {?}\n         */\n        (index, row) => {\n            /** @type {?} */\n            const rowId = row[this.rowIdColumnName];\n            return rowId + this.rows.length;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n    }\n    /*\n       * Row selection specific methods:\n       */\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    isRowSelected(row) {\n        /** @type {?} */\n        const rowId = row[this.rowIdColumnName];\n        return this.selectedRowsIds.indexOf(rowId) > -1;\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    selectRow(row) {\n        /** @type {?} */\n        const rowId = row[this.rowIdColumnName];\n        /** @type {?} */\n        const newSelectedRows = [...this.selectedRowsIds, rowId];\n        this.selectedRowsIdsChange.emit(newSelectedRows);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    selectAllSelectableRows() {\n        /** @type {?} */\n        const newSelectedRows = [];\n        this.rows.forEach((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => {\n            /** @type {?} */\n            const rowId = row[this.rowIdColumnName];\n            if (this.canSelectRowPredicate(row)) {\n                newSelectedRows.push(rowId);\n            }\n        }));\n        this.selectedRowsIdsChange.emit(newSelectedRows);\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    unselectRow(row) {\n        /** @type {?} */\n        const rowId = row[this.rowIdColumnName];\n        /** @type {?} */\n        const indexOfRowId = this.selectedRowsIds.indexOf(rowId);\n        /** @type {?} */\n        const newSelectedRows = [...this.selectedRowsIds];\n        newSelectedRows.splice(indexOfRowId, 1);\n        this.selectedRowsIdsChange.emit(newSelectedRows);\n    }\n    /**\n     * @return {?}\n     */\n    unselectAllRows() {\n        this.selectedRowsIdsChange.emit([]);\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    toggleRowSelection(row) {\n        if (this.isRowSelected(row)) {\n            this.unselectRow(row);\n        }\n        else {\n            this.selectRow(row);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toggleSelectAllRows() {\n        if (this.areAllSelectableRowsSelected) {\n            this.unselectAllRows();\n        }\n        else {\n            this.selectAllSelectableRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get areAllSelectableRowsSelected() {\n        /** @type {?} */\n        let selectedRowsCount = 0;\n        this.rows.forEach((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => {\n            /** @type {?} */\n            const rowId = row[this.rowIdColumnName];\n            if (this.selectedRowsIds.indexOf(rowId) > -1) {\n                selectedRowsCount++;\n            }\n        }));\n        /** @type {?} */\n        const selectableRows = this.rows.filter(this.canSelectRowPredicate);\n        return selectedRowsCount === selectableRows.length && selectableRows.length;\n    }\n}\nNgbTableComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngb-table',\n                template: \"<div class=\\\"card ngbTableRoot\\\" [ngClass]=\\\"{'border-primary': selectedRowsIds.length }\\\">\\n  <div class=\\\"card-header\\\" [ngClass]=\\\"{'bg-primary text-light': selectedRowsIds.length && selectActionsHeaderTemplate}\\\"\\n    *ngIf=\\\"headerTemplate\\\">\\n    <ng-container *ngIf=\\\"selectedRowsIds.length && selectActionsHeaderTemplate; else noRowsSelected\\\">\\n      <ng-container *ngTemplateOutlet=\\\"selectActionsHeaderTemplate\\\"></ng-container>\\n    </ng-container>\\n    <ng-template #noRowsSelected>\\n      <ng-container *ngTemplateOutlet=\\\"headerTemplate\\\"></ng-container>\\n    </ng-template>\\n  </div>\\n\\n  <ng-container *ngFor=\\\"let subHeaderTemplate of subheaderTemplates\\\">\\n    <div class=\\\"card-header\\\">\\n      <ng-container *ngTemplateOutlet=\\\"subHeaderTemplate.templateRef\\\"></ng-container>\\n    </div>\\n  </ng-container>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table m-0\\\">\\n\\n      <thead>\\n        <tr>\\n          <th class=\\\"w-01 align-top\\\" *ngIf=\\\"selectable\\\">\\n            <ngb-checkbox [checked]=\\\"areAllSelectableRowsSelected\\\" [disabled]=\\\"!rows.length\\\" (checkChange)=\\\"toggleSelectAllRows()\\\">\\n            </ngb-checkbox>\\n          </th>\\n          <ng-container *ngTemplateOutlet=\\\"headTemplate\\\"></ng-container>\\n        </tr>\\n      </thead>\\n\\n      <tbody>\\n        <ng-container *ngIf=\\\"rows.length\\\">\\n          <ng-container *ngFor=\\\"let row of rows; trackBy: rowTracker\\\">\\n            <tr [ngClass]=\\\"{'table-primary': isRowSelected(row)}\\\">\\n              <td class=\\\"align-middle\\\" *ngIf=\\\"selectable\\\">\\n                <ngb-checkbox\\n                  [disabled]=\\\"!canSelectRowPredicate(row)\\\"\\n                  [checked]=\\\"isRowSelected(row)\\\"\\n                  (checkChange)=\\\"toggleRowSelection(row)\\\"\\n                ></ngb-checkbox>\\n              </td>\\n              <ng-container *ngTemplateOutlet=\\\"bodyRowTemplate; context: { $implicit: row }\\\"></ng-container>\\n            </tr>\\n          </ng-container>\\n          <ng-container *ngFor=\\\"let footerRowTemplate of footerRowTemplates\\\">\\n            <tr>\\n              <td *ngIf=\\\"selectable\\\"></td><!-- empty table cell to fill no checkbox space -->\\n              <ng-container *ngTemplateOutlet=\\\"footerRowTemplate.templateRef\\\"></ng-container>\\n            </tr>\\n          </ng-container>\\n        </ng-container>\\n      </tbody>\\n\\n    </table>\\n  </div>\\n\\n  <div class=\\\"card-footer\\\" *ngIf=\\\"footerTemplate\\\">\\n    <ng-container *ngTemplateOutlet=\\\"footerTemplate\\\"></ng-container>\\n  </div>\\n\\n</div>\",\n                styles: [\".w-01{width:1%}\"]\n            }] }\n];\n/** @nocollapse */\nNgbTableComponent.ctorParameters = () => [];\nNgbTableComponent.propDecorators = {\n    rows: [{ type: Input }],\n    rowIdColumnName: [{ type: Input }],\n    selectable: [{ type: Input }],\n    selectedRowsIds: [{ type: Input }],\n    selectedRowsIdsChange: [{ type: Output }],\n    headerTemplate: [{ type: ContentChild, args: [NgbTableHeaderDirective, { static: false, read: TemplateRef },] }],\n    subheaderTemplates: [{ type: ContentChildren, args: [NgbTableSubheaderDirective, { descendants: false },] }],\n    selectActionsHeaderTemplate: [{ type: ContentChild, args: [NgbTableSelectActionsHeaderDirective, { static: false, read: TemplateRef },] }],\n    headTemplate: [{ type: ContentChild, args: [NgbTableHeadDirective, { static: false, read: TemplateRef },] }],\n    bodyRowTemplate: [{ type: ContentChild, args: [NgbTableBodyRowDirective, { static: false, read: TemplateRef },] }],\n    footerRowTemplates: [{ type: ContentChildren, args: [NgbTableFooterRowDirective, { descendants: false },] }],\n    footerTemplate: [{ type: ContentChild, args: [NgbTableFooterDirective, { static: false, read: TemplateRef },] }],\n    canSelectRowPredicate: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CheckboxComponent {\n    constructor() {\n        this.disabled = false;\n        this.checkChange = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    toggleChecked() {\n        this.checkChange.emit(!this.checked);\n    }\n}\nCheckboxComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngb-checkbox',\n                template: \"<div\\n  class=\\\"checkbox\\\"\\n  [ngClass]=\\\"{\\n    'checked': checked,\\n    'disabled': disabled\\n  }\\\"\\n  (click)=\\\"disabled ? null : toggleChecked()\\\"\\n></div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".checkbox{position:relative;width:22px;height:22px;border:2px solid var(--secondary);opacity:.7;border-radius:3px}.checkbox:after{position:absolute;top:3px;left:6px;content:\\\"\\\";width:6px;height:11px;border-bottom:2px solid transparent;border-right:2px solid transparent;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox:hover:not(.disabled){opacity:1;cursor:pointer}.checkbox.checked{border-color:var(--primary);background:var(--primary);opacity:1}.checkbox.checked:after{border-bottom-color:var(--white);border-right-color:var(--white)}.checkbox.disabled{opacity:.5}\"]\n            }] }\n];\n/** @nocollapse */\nCheckboxComponent.ctorParameters = () => [];\nCheckboxComponent.propDecorators = {\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    checkChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgbTableModule {\n}\nNgbTableModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    NgbTableComponent,\n                    NgbTableHeaderDirective,\n                    NgbTableSubheaderDirective,\n                    NgbTableSelectActionsHeaderDirective,\n                    NgbTableHeadDirective,\n                    NgbTableBodyRowDirective,\n                    NgbTableFooterDirective,\n                    NgbTableFooterRowDirective,\n                    CheckboxComponent,\n                ],\n                imports: [\n                    CommonModule,\n                ],\n                exports: [\n                    NgbTableComponent,\n                    NgbTableHeaderDirective,\n                    NgbTableSubheaderDirective,\n                    NgbTableSelectActionsHeaderDirective,\n                    NgbTableHeadDirective,\n                    NgbTableBodyRowDirective,\n                    NgbTableFooterDirective,\n                    NgbTableFooterRowDirective,\n                ]\n            },] }\n];\n\nexport { NgbTableModule, NgbTableComponent as ɵa, NgbTableHeaderDirective as ɵb, NgbTableSubheaderDirective as ɵc, NgbTableSelectActionsHeaderDirective as ɵd, NgbTableHeadDirective as ɵe, NgbTableBodyRowDirective as ɵf, NgbTableFooterRowDirective as ɵg, NgbTableFooterDirective as ɵh, CheckboxComponent as ɵi };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}