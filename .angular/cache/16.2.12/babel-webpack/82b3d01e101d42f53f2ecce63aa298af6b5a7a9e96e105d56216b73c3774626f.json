{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nclass AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    if (this.authService.isLoggedIn()) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', 'Bearer ' + localStorage.getItem('jwtToken'))\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}\nexport { AuthInterceptor };\nexport const AuthInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","AuthInterceptor","constructor","authService","intercept","request","next","isLoggedIn","clone","headers","set","localStorage","getItem","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac","AuthInterceptorProvider","provide","useClass","multi"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\auth\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    if (this.authService.isLoggedIn()) {\n      request = request.clone({\n        headers: request.headers.set(\n          'Authorization',\n          'Bearer ' + localStorage.getItem('jwtToken')\n        ),\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n\nexport const AuthInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true,\n};\n"],"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;;;AAI7B,MACaC,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,IAAI,IAAI,CAACH,WAAW,CAACI,UAAU,EAAE,EAAE;MACjCF,OAAO,GAAGA,OAAO,CAACG,KAAK,CAAC;QACtBC,OAAO,EAAEJ,OAAO,CAACI,OAAO,CAACC,GAAG,CAC1B,eAAe,EACf,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;OAE/C,CAAC;;IAGJ,OAAON,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;EAAC,QAAAS,CAAA,G;qBAjBUb,eAAe,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAflB,eAAe;IAAAmB,OAAA,EAAfnB,eAAe,CAAAoB;EAAA;;SAAfpB,eAAe;AAoB5B,OAAO,MAAMqB,uBAAuB,GAAG;EACrCC,OAAO,EAAEvB,iBAAiB;EAC1BwB,QAAQ,EAAEvB,eAAe;EACzBwB,KAAK,EAAE;CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}