{"ast":null,"code":"export function amountSumValidator(distributionControlName, amountControlName) {\n  return control => {\n    const distributionControl = control?.parent?.get(distributionControlName);\n    const amount = control?.parent?.get(amountControlName)?.value;\n    console.log(\"amount: \", amount);\n    let sum = 0;\n    const value = control.value;\n    if (!distributionControl) {\n      return null;\n    }\n    if (distributionControl.value === 'exact_amounts') {\n      value.forEach(memberObj => {\n        //erre a kasztolgatásra azért van szükség, mert hiába number a typeja elvileg, de gyakorlatilag string értéket kap a sum\n        const amountString = memberObj.amount.toString();\n        sum += parseInt(amountString);\n      });\n      console.log(\"sum: \", sum);\n      if (sum > amount) {\n        return {\n          tooMuch: true\n        };\n      } else if (sum < amount) {\n        return {\n          tooShort: true\n        };\n      } else {\n        return null;\n      }\n    }\n    return null;\n  };\n}","map":{"version":3,"names":["amountSumValidator","distributionControlName","amountControlName","control","distributionControl","parent","get","amount","value","console","log","sum","forEach","memberObj","amountString","toString","parseInt","tooMuch","tooShort"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\expense\\validators\\amount-sum.validator.ts"],"sourcesContent":["import { ValidatorFn, AbstractControl, ValidationErrors } from \"@angular/forms\";\r\n\r\nexport function amountSumValidator(distributionControlName: string, amountControlName: string): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const distributionControl = control?.parent?.get(distributionControlName) as AbstractControl;\r\n      const amount = control?.parent?.get(amountControlName)?.value;\r\n      console.log(\"amount: \", amount);\r\n      \r\n      let sum: number = 0;\r\n      const value: { userId: number; amount: number }[] = control.value;\r\n      if(!distributionControl){\r\n        return null;\r\n      }\r\n  \r\n      if(distributionControl.value === 'exact_amounts'){\r\n        value.forEach((memberObj) => {\r\n          //erre a kasztolgatásra azért van szükség, mert hiába number a typeja elvileg, de gyakorlatilag string értéket kap a sum\r\n          const amountString =  memberObj.amount.toString();\r\n          sum += parseInt(amountString);\r\n          \r\n          \r\n        });\r\n        console.log(\"sum: \", sum);\r\n        \r\n        if (sum > amount) {\r\n          return { tooMuch: true };\r\n        } else if (sum < amount) {\r\n          return { tooShort: true };\r\n        }else{\r\n          return null;\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    };\r\n  }"],"mappings":"AAEA,OAAM,SAAUA,kBAAkBA,CAACC,uBAA+B,EAAEC,iBAAyB;EACzF,OAAQC,OAAwB,IAA6B;IAC3D,MAAMC,mBAAmB,GAAGD,OAAO,EAAEE,MAAM,EAAEC,GAAG,CAACL,uBAAuB,CAAoB;IAC5F,MAAMM,MAAM,GAAGJ,OAAO,EAAEE,MAAM,EAAEC,GAAG,CAACJ,iBAAiB,CAAC,EAAEM,KAAK;IAC7DC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,MAAM,CAAC;IAE/B,IAAII,GAAG,GAAW,CAAC;IACnB,MAAMH,KAAK,GAAyCL,OAAO,CAACK,KAAK;IACjE,IAAG,CAACJ,mBAAmB,EAAC;MACtB,OAAO,IAAI;;IAGb,IAAGA,mBAAmB,CAACI,KAAK,KAAK,eAAe,EAAC;MAC/CA,KAAK,CAACI,OAAO,CAAEC,SAAS,IAAI;QAC1B;QACA,MAAMC,YAAY,GAAID,SAAS,CAACN,MAAM,CAACQ,QAAQ,EAAE;QACjDJ,GAAG,IAAIK,QAAQ,CAACF,YAAY,CAAC;MAG/B,CAAC,CAAC;MACFL,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,GAAG,CAAC;MAEzB,IAAIA,GAAG,GAAGJ,MAAM,EAAE;QAChB,OAAO;UAAEU,OAAO,EAAE;QAAI,CAAE;OACzB,MAAM,IAAIN,GAAG,GAAGJ,MAAM,EAAE;QACvB,OAAO;UAAEW,QAAQ,EAAE;QAAI,CAAE;OAC1B,MAAI;QACH,OAAO,IAAI;;;IAIf,OAAO,IAAI;EACb,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}