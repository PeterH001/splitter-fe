{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/common/http\";\nconst BASEURL = 'http://localhost:3000/users';\nclass UserService {\n  patchUser(userData) {\n    return this.http.patch(BASEURL, userData);\n  }\n  constructor(authservice, http) {\n    this.authservice = authservice;\n    this.http = http;\n  }\n  roleMatch(allowedRoles) {\n    let isRoleMatching = false;\n    const userRoles = this.authservice.getRoles();\n    if (userRoles != null && userRoles) {\n      return allowedRoles.some(role => userRoles.includes(role));\n    }\n    return isRoleMatching;\n  }\n  searchUser(partialUsername) {\n    return this.http.post(BASEURL + '/find', {\n      partialUsername\n    });\n  }\n  getUsers() {\n    return this.http.get(BASEURL);\n  }\n  getMe() {\n    return this.http.get(BASEURL + '/me');\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UserService };","map":{"version":3,"names":["BASEURL","UserService","patchUser","userData","http","patch","constructor","authservice","roleMatch","allowedRoles","isRoleMatching","userRoles","getRoles","some","role","includes","searchUser","partialUsername","post","getUsers","get","getMe","_","i0","ɵɵinject","i1","AuthService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport { UserDTO } from '../user/dto';\n\nconst BASEURL = 'http://localhost:3000/users';\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  patchUser(userData: Partial<{ username: string | null; email: string | null; firstName: string | null; lastName: string | null; }>) {\n    return this.http.patch(BASEURL, userData);\n  }\n  constructor(private authservice: AuthService, private http: HttpClient) {}\n\n  public roleMatch(allowedRoles: string[]): boolean {\n    let isRoleMatching = false;\n    const userRoles: string[] = this.authservice.getRoles();\n    if (userRoles != null && userRoles) {\n      return allowedRoles.some((role) => userRoles.includes(role));\n    }\n    return isRoleMatching;\n  }\n\n  public searchUser(partialUsername: string) {\n    return this.http.post(BASEURL + '/find', { partialUsername });\n  }\n\n  public getUsers() {\n    return this.http.get<{ id: number; username: string }[]>(BASEURL);\n  }\n\n  public getMe() {\n    return this.http.get<UserDTO>(BASEURL + '/me');\n  }\n}\n"],"mappings":";;;AAKA,MAAMA,OAAO,GAAG,6BAA6B;AAC7C,MAGaC,WAAW;EACtBC,SAASA,CAACC,QAAwH;IAChI,OAAO,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,OAAO,EAAEG,QAAQ,CAAC;EAC3C;EACAG,YAAoBC,WAAwB,EAAUH,IAAgB;IAAlD,KAAAG,WAAW,GAAXA,WAAW;IAAuB,KAAAH,IAAI,GAAJA,IAAI;EAAe;EAElEI,SAASA,CAACC,YAAsB;IACrC,IAAIC,cAAc,GAAG,KAAK;IAC1B,MAAMC,SAAS,GAAa,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACvD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE;MAClC,OAAOF,YAAY,CAACI,IAAI,CAAEC,IAAI,IAAKH,SAAS,CAACI,QAAQ,CAACD,IAAI,CAAC,CAAC;;IAE9D,OAAOJ,cAAc;EACvB;EAEOM,UAAUA,CAACC,eAAuB;IACvC,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAClB,OAAO,GAAG,OAAO,EAAE;MAAEiB;IAAe,CAAE,CAAC;EAC/D;EAEOE,QAAQA,CAAA;IACb,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAqCpB,OAAO,CAAC;EACnE;EAEOqB,KAAKA,CAAA;IACV,OAAO,IAAI,CAACjB,IAAI,CAACgB,GAAG,CAAUpB,OAAO,GAAG,KAAK,CAAC;EAChD;EAAC,QAAAsB,CAAA,G;qBAzBUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX5B,WAAW;IAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEP/B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}