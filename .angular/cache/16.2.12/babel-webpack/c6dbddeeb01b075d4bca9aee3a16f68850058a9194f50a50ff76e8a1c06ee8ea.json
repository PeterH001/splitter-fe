{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ExpenseService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/expense';\n  }\n  getExpenseById(id) {\n    return this.http.get(this.baseUrl + `/${id}`);\n  }\n  updateExpenseById(id, expenseData) {\n    expenseData.payerId = parseInt(expenseData.payerId);\n    return this.http.patch(this.baseUrl + `/${id}`, expenseData);\n  }\n  getMyExpenses() {\n    return this.http.get(this.baseUrl + `/myexpenses`);\n  }\n  getExpenseCategories() {\n    return this.http.get(this.baseUrl + `/categories`);\n  }\n  getExpenseDistributions() {\n    return this.http.get(this.baseUrl + `/distributiontypes`);\n  }\n  getCurrencies() {\n    return this.http.get(this.baseUrl + `/currencies`);\n  }\n  //a payerId és az exactAmountsDebtData.amount kasztolgatásásra azért van szükség, \n  //mert valamiért stringet kapok a formControlból number helyett, de nem szól miatta a fordító\n  createExpense(createExpenseData) {\n    console.log('createExpense called');\n    console.log(createExpenseData);\n    createExpenseData.payerId = parseInt(createExpenseData.payerId);\n    createExpenseData.exactAmountsDebtData = createExpenseData.exactAmountsDebtData?.map(debtData => {\n      const amount = parseInt(debtData.amount);\n      return {\n        userId: debtData.userId,\n        amount\n      };\n    });\n    console.log(createExpenseData);\n    return this.http.post(this.baseUrl, createExpenseData);\n  }\n  static #_ = this.ɵfac = function ExpenseService_Factory(t) {\n    return new (t || ExpenseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExpenseService,\n    factory: ExpenseService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ExpenseService };","map":{"version":3,"names":["ExpenseService","constructor","http","baseUrl","getExpenseById","id","get","updateExpenseById","expenseData","payerId","parseInt","patch","getMyExpenses","getExpenseCategories","getExpenseDistributions","getCurrencies","createExpense","createExpenseData","console","log","exactAmountsDebtData","map","debtData","amount","userId","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Peti\\nest_projects\\splitwise\\frontend\\splitter-fe\\src\\app\\services\\expense.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ExpenseDTO } from '../expense/expenses/dto';\nimport { GetExpenseDTO } from '../expense/dto';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpenseService {\n  private baseUrl: string = 'http://localhost:3000/expense';\n\n  constructor(private http: HttpClient) {}\n\n  getExpenseById(id: number) {\n    return this.http.get<GetExpenseDTO>(this.baseUrl + `/${id}`);\n  }\n\n  updateExpenseById(id: number, expenseData: Partial<{ name: string | null; payerId: number | string | null; groupId: number | null; amount: number | null; currency: string | null; category: string | null; distributionType: string | null; description: string | null; userIds: number[] | null; proportionalDebtsData: { userId: number; percent: number; }[] | null; exactAmountsDebtData: { userId: number; amount: number; }[] | null; }>) {\n    expenseData.payerId = parseInt(expenseData.payerId as string);\n    \n    return this.http.patch<GetExpenseDTO>(this.baseUrl + `/${id}`, expenseData);\n  }\n\n  getMyExpenses() {\n    return this.http.get<ExpenseDTO[]>(this.baseUrl + `/myexpenses`);\n  }\n\n  getExpenseCategories() {\n    return this.http.get<string[]>(this.baseUrl + `/categories`);\n  }\n\n  getExpenseDistributions() {\n    return this.http.get<string[]>(this.baseUrl + `/distributiontypes`);\n  }\n\n  getCurrencies() {\n    return this.http.get<string[]>(this.baseUrl + `/currencies`);\n  }\n\n  //a payerId és az exactAmountsDebtData.amount kasztolgatásásra azért van szükség, \n  //mert valamiért stringet kapok a formControlból number helyett, de nem szól miatta a fordító\n  createExpense(\n    createExpenseData: Partial<{\n      name: string | null;\n      payerId: number | string | null;\n      groupId: number | null;\n      amount: string | null;\n      currency: string | null;\n      category: string | null;\n      distributionType: string | null;\n      description: string | null;\n      userIds: number[] | null;\n      proportionalDebtsData: { userId: number; percent: number }[] | null;\n      exactAmountsDebtData: { userId: number; amount: number | string }[] | null;\n    }>\n  ) {\n    console.log('createExpense called');\n    console.log(createExpenseData);\n\n    createExpenseData.payerId = parseInt(createExpenseData.payerId as string);\n    createExpenseData.exactAmountsDebtData = createExpenseData.exactAmountsDebtData?.map(debtData=>{\n      const amount: number = parseInt(debtData.amount as string);\n      return {userId: debtData.userId, amount}\n    })\n    console.log(createExpenseData);\n    return this.http.post<any>(this.baseUrl, createExpenseData);\n  }\n}\n"],"mappings":";;AAKA,MAGaA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAW,+BAA+B;EAElB;EAEvCC,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAgB,IAAI,CAACH,OAAO,GAAG,IAAIE,EAAE,EAAE,CAAC;EAC9D;EAEAE,iBAAiBA,CAACF,EAAU,EAAEG,WAAiZ;IAC7aA,WAAW,CAACC,OAAO,GAAGC,QAAQ,CAACF,WAAW,CAACC,OAAiB,CAAC;IAE7D,OAAO,IAAI,CAACP,IAAI,CAACS,KAAK,CAAgB,IAAI,CAACR,OAAO,GAAG,IAAIE,EAAE,EAAE,EAAEG,WAAW,CAAC;EAC7E;EAEAI,aAAaA,CAAA;IACX,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAe,IAAI,CAACH,OAAO,GAAG,aAAa,CAAC;EAClE;EAEAU,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,aAAa,CAAC;EAC9D;EAEAW,uBAAuBA,CAAA;IACrB,OAAO,IAAI,CAACZ,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,oBAAoB,CAAC;EACrE;EAEAY,aAAaA,CAAA;IACX,OAAO,IAAI,CAACb,IAAI,CAACI,GAAG,CAAW,IAAI,CAACH,OAAO,GAAG,aAAa,CAAC;EAC9D;EAEA;EACA;EACAa,aAAaA,CACXC,iBAYE;IAEFC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCD,OAAO,CAACC,GAAG,CAACF,iBAAiB,CAAC;IAE9BA,iBAAiB,CAACR,OAAO,GAAGC,QAAQ,CAACO,iBAAiB,CAACR,OAAiB,CAAC;IACzEQ,iBAAiB,CAACG,oBAAoB,GAAGH,iBAAiB,CAACG,oBAAoB,EAAEC,GAAG,CAACC,QAAQ,IAAE;MAC7F,MAAMC,MAAM,GAAWb,QAAQ,CAACY,QAAQ,CAACC,MAAgB,CAAC;MAC1D,OAAO;QAACC,MAAM,EAAEF,QAAQ,CAACE,MAAM;QAAED;MAAM,CAAC;IAC1C,CAAC,CAAC;IACFL,OAAO,CAACC,GAAG,CAACF,iBAAiB,CAAC;IAC9B,OAAO,IAAI,CAACf,IAAI,CAACuB,IAAI,CAAM,IAAI,CAACtB,OAAO,EAAEc,iBAAiB,CAAC;EAC7D;EAAC,QAAAS,CAAA,G;qBA1DU1B,cAAc,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd/B,cAAc;IAAAgC,OAAA,EAAdhC,cAAc,CAAAiC,IAAA;IAAAC,UAAA,EAFb;EAAM;;SAEPlC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}